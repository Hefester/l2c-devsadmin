<?xml version="1.0"?>
<doc>
    <assembly>
        <name>L2.Net</name>
    </assembly>
    <members>
        <member name="T:L2.Net.IMapUnit">
            <summary>
            Interface, that must have all objects, that have <see cref="P:L2.Net.IMapUnit.Position"/> on the world.
            </summary>
        </member>
        <member name="P:L2.Net.IMapUnit.Position">
            <summary>
            Object <see cref="P:L2.Net.IMapUnit.Position"/>.
            </summary>
        </member>
        <member name="T:L2.Net.INamed">
            <summary>
            Named objects interface.
            </summary>
        </member>
        <member name="P:L2.Net.INamed.Name">
            <summary>
            Gets of sets <see cref="T:L2.Net.INamed"/> object <paramref name="Name"/> value.
            </summary>
        </member>
        <member name="T:L2.Net.IPoint3D">
            <summary>
            3-i point interface. 
            </summary>
        </member>
        <member name="P:L2.Net.IPoint3D.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:L2.Net.IPoint3D.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:L2.Net.IPoint3D.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="M:L2.Net.IPoint3D.DistanceTo(L2.Net.IPoint3D)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.IPoint3D"/> and provided.
            </summary>
            <param name="other"><see cref="T:L2.Net.IPoint3D"/> to calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.IPoint3D"/> and some other.</returns>
        </member>
        <member name="M:L2.Net.IPoint3D.DistanceTo(L2.Net.Point3D)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.IPoint3D"/> and provided <see cref="T:L2.Net.Point3D"/>.
            </summary>
            <param name="other"><see cref="T:L2.Net.Point3D"/> to calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.IPoint3D"/> and provided <see cref="T:L2.Net.Point3D"/>.</returns>
        </member>
        <member name="T:L2.Net.IPosition">
            <summary>
            Angle-oriented <see cref="T:L2.Net.IPoint3D"/>.
            </summary>
        </member>
        <member name="P:L2.Net.IPosition.Angle">
            <summary>
            Rotation angle.
            </summary>
        </member>
        <member name="M:L2.Net.IPosition.DistanceTo(L2.Net.IPosition)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.IPosition"/> and provided.
            </summary>
            <param name="other"><see cref="T:L2.Net.IPosition"/>, calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.IPosition"/> and provided.</returns>
        </member>
        <member name="M:L2.Net.IPosition.DistanceTo(L2.Net.Position)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.IPosition"/> and provided <see cref="T:L2.Net.Position"/>.
            </summary>
            <param name="other"><see cref="T:L2.Net.Position"/>, calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.IPosition"/> and provided.</returns>
        </member>
        <member name="T:L2.Net.IUniqueIdentified">
            <summary>
            Base world unit interface.
            </summary>
        </member>
        <member name="P:L2.Net.IUniqueIdentified.UniqueID">
            <summary>
            Unit unique id.
            </summary>
        </member>
        <member name="T:L2.Net.Point3D">
            <summary>
            Represents 3-i point struct.
            </summary>
        </member>
        <member name="F:L2.Net.Point3D.Zero">
            <summary>
            Zero <see cref="T:L2.Net.Point3D"/> value.
            </summary>
        </member>
        <member name="F:L2.Net.Point3D.m_X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Point3D.m_Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Point3D.m_Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="M:L2.Net.Point3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Point3D"/> struct.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-coordinate.</param>
            <param name="z">Z-coordinate.</param>
        </member>
        <member name="P:L2.Net.Point3D.X">
            <summary>
            Gets or sets <see cref="T:L2.Net.Point3D"/> X-coordinate.
            </summary>
        </member>
        <member name="P:L2.Net.Point3D.Y">
            <summary>
            Gets or sets <see cref="T:L2.Net.Point3D"/> Y-coordinate.
            </summary>
        </member>
        <member name="P:L2.Net.Point3D.Z">
            <summary>
            Gets or sets <see cref="T:L2.Net.Point3D"/> Z-coordinate.
            </summary>
        </member>
        <member name="M:L2.Net.Point3D.DistanceTo(L2.Net.Point3D)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.Point3D"/> and some other.
            </summary>
            <param name="other"><see cref="T:L2.Net.Point3D"/> distance to which is needed to calculate.</param>
            <returns><see cref="T:System.Double"/> value, that is distance between current and some other <see cref="T:L2.Net.Point3D"/> objects.</returns>
        </member>
        <member name="M:L2.Net.Point3D.DistanceTo(L2.Net.IPoint3D)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.Point3D"/> and other <see cref="T:L2.Net.IPoint3D"/>.
            </summary>
            <param name="other"><see cref="T:L2.Net.IPoint3D"/> distance to which is needed to calculate.</param>
            <returns><see cref="T:System.Double"/> value, that is distance between current and other <see cref="T:L2.Net.IPoint3D"/> objects.</returns>
        </member>
        <member name="M:L2.Net.Point3D.DistanceBetween(L2.Net.Point3D,L2.Net.Point3D)">
            <summary>
            Calculates distance between two <see cref="T:L2.Net.Point3D" /> objects.
            </summary>
            <param name="a">First <see cref="T:L2.Net.Point3D"/>.</param>
            <param name="b">Second <see cref="T:L2.Net.Point3D"/>.</param>
            <returns>Distance between two <see cref="T:L2.Net.Point3D" /> objects.</returns>
        </member>
        <member name="P:L2.Net.Point3D.Position">
            <summary>
            Current <see cref="T:L2.Net.Point3D"/> struct <see cref="P:L2.Net.Point3D.Position"/> representation.
            </summary>
        </member>
        <member name="T:L2.Net.Position">
            <summary>
            Represent angle-oriented 3-i point struct.
            </summary>
        </member>
        <member name="F:L2.Net.Position.Zero">
            <summary>
            Zero <see cref="T:L2.Net.Position"/> value.
            </summary>
        </member>
        <member name="F:L2.Net.Position.m_X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Position.m_Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Position.m_Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Position.m_Angle">
            <summary>
            Rotation angle.
            </summary>
        </member>
        <member name="M:L2.Net.Position.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Position"/> struct.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-coordinate.</param>
            <param name="z">Z-coordinate.</param>
        </member>
        <member name="M:L2.Net.Position.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Position"/> struct.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-coordinate.</param>
            <param name="z">Z-coordinate.</param>
            <param name="angle">Rotation angle.</param>
        </member>
        <member name="P:L2.Net.Position.Angle">
            <summary>
            Gets or sets <see cref="T:L2.Net.Position"/> rotation angle.
            </summary>
        </member>
        <member name="M:L2.Net.Position.DistanceTo(L2.Net.IPosition)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.IPosition"/> and provided.
            </summary>
            <param name="other"><see cref="T:L2.Net.IPosition"/>, calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.IPosition"/> and provided.</returns>
        </member>
        <member name="M:L2.Net.Position.DistanceTo(L2.Net.Position)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.IPosition"/> and provided <see cref="T:L2.Net.Position"/>.
            </summary>
            <param name="other"><see cref="T:L2.Net.Position"/>, calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.IPosition"/> and provided.</returns>
        </member>
        <member name="P:L2.Net.Position.X">
            <summary>
            Gets or sets <see cref="T:L2.Net.Position"/> X-coordinate.
            </summary>
        </member>
        <member name="P:L2.Net.Position.Y">
            <summary>
            Gets or sets <see cref="T:L2.Net.Position"/> Y-coordinate.
            </summary>
        </member>
        <member name="P:L2.Net.Position.Z">
            <summary>
            Gets or sets <see cref="T:L2.Net.Position"/> Z-coordinate.
            </summary>
        </member>
        <member name="M:L2.Net.Position.DistanceTo(L2.Net.Point3D)">
            <summary>
            Returns distance between current <see cref="P:L2.Net.Position.Point3D"/> and some other.
            </summary>
            <param name="other"><see cref="P:L2.Net.Position.Point3D"/> distance to which is needed to calculate.</param>
            <returns><see cref="T:System.Double"/> value, that is distance between current and some other <see cref="P:L2.Net.Position.Point3D"/> objects.</returns>
        </member>
        <member name="M:L2.Net.Position.DistanceTo(L2.Net.IPoint3D)">
            <summary>
            Returns distance between current <see cref="P:L2.Net.Position.Point3D"/> and other <see cref="T:L2.Net.IPoint3D"/>.
            </summary>
            <param name="other"><see cref="T:L2.Net.IPoint3D"/> distance to which is needed to calculate.</param>
            <returns><see cref="T:System.Double"/> value, that is distance between current and other <see cref="T:L2.Net.IPoint3D"/> objects.</returns>
        </member>
        <member name="P:L2.Net.Position.Point3D">
            <summary>
            Current <see cref="T:L2.Net.Position"/> struct <see cref="P:L2.Net.Position.Point3D"/> representation.
            </summary>
        </member>
        <member name="T:L2.Net.Utility">
            <summary>
            Geometry utilities.
            </summary>
        </member>
        <member name="M:L2.Net.Utility.DistanceBetween(L2.Net.IPoint3D,L2.Net.IPoint3D)">
            <summary>
            Calculates distance between two <see cref="T:L2.Net.IPoint3D" /> objects.
            </summary>
            <param name="a">First <see cref="T:L2.Net.IPoint3D"/>.</param>
            <param name="b">Second <see cref="T:L2.Net.IPoint3D"/>.</param>
            <returns>Distance between two <see cref="T:L2.Net.IPoint3D" /> objects.</returns>
        </member>
        <member name="M:L2.Net.Utility.DistanceBetween(L2.Net.Point3D,L2.Net.Point3D)">
            <summary>
            Calculates distance between two <see cref="T:L2.Net.Point3D" /> objects.
            </summary>
            <param name="a">First <see cref="T:L2.Net.Point3D"/>.</param>
            <param name="b">Second <see cref="T:L2.Net.Point3D"/>.</param>
            <returns>Distance between two <see cref="T:L2.Net.Point3D" /> objects.</returns>
        </member>
        <member name="M:L2.Net.Utility.AbsoluteValue(System.Int32)">
            <summary>
            Absolute value of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="v"><see cref="T:System.Int32"/> value to validate.</param>
            <returns>Absolute value of <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:L2.Net.Utility.AbsoluteValue(System.Single)">
            <summary>
            Absolute value of <see cref="T:System.Single"/> value.
            </summary>
            <param name="v"><see cref="T:System.Single"/> value to validate.</param>
            <returns>Absolute value of <see cref="T:System.Single"/> value.</returns>
        </member>
        <member name="T:L2.Net.Geometry.IGeometrical">
            <summary>
            3-dimensional objects interface.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.IGeometrical.DistanceTo(L2.Net.Point3D)">
            <summary>
            Returns distance between current <see cref="T:L2.Net.Geometry.IGeometrical"/> object and provided <see cref="T:L2.Net.Point3D"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> object to calculate distance to.</param>
            <returns>Distance between current <see cref="T:L2.Net.Geometry.IGeometrical"/> object and provided <see cref="T:L2.Net.Point3D"/>.</returns>
        </member>
        <member name="T:L2.Net.Geometry.IRounded">
            <summary>
            Base interface for rounded geometrical objects.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.IRounded.Center">
            <summary>
            Gets or sets <see cref="T:L2.Net.Geometry.IGeometrical"/> object center position.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.IRounded.Radius">
            <summary>
            Gets or sets <see cref="T:L2.Net.Geometry.IGeometrical"/> object radius.
            </summary>
        </member>
        <member name="T:L2.Net.Geometry.IZone">
            <summary>
            Base zones interface.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.IZone.IsInside(L2.Net.Point3D)">
            <summary>
            Indicates if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.IZone"/> object.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:L2.Net.Geometry.IMultiPlanedObject">
            <summary>
            Multi-planed objects interface.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.IMultiPlanedObject.Normalize">
            <summary>
            Normalization method.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.IMultiPlanedObject.Normalized">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.IMultiPlanedObject"/> was normalized yet.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.IMultiPlanedObject.Triangulate">
            <summary>
            Triangulation method.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.IMultiPlanedObject.Triangulated">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.IMultiPlanedObject"/> was triangulated yet.
            </summary>
        </member>
        <member name="T:L2.Net.Geometry.Plane">
            <summary>
            Represents <see cref="T:L2.Net.Geometry.Plane"/> struct.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Plane.A">
            <summary>
            Geometrical A value.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Plane.B">
            <summary>
            Geometrical B value.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Plane.C">
            <summary>
            Geometrical C value.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Plane.D">
            <summary>
            Geometrical D value.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Plane.fSqrt">
            <summary>
            Calculations constant.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Plane.#ctor(L2.Net.Geometry.Vertex[])">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Geometry.Plane"/> struct.
            </summary>
            <param name="vertexes">Array of <see cref="T:L2.Net.Geometry.Vertex"/> objects to initialize from.</param>
        </member>
        <member name="M:L2.Net.Geometry.Plane.DistanceTo(L2.Net.Point3D)">
            <summary>
            Calculates relative distance from current <see cref="T:L2.Net.Geometry.Plane"/> object to provided <see cref="T:L2.Net.Point3D"/> object.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> to calculate distance to.</param>
            <returns>Relative distance from current <see cref="T:L2.Net.Geometry.Plane"/> object to provided <see cref="T:L2.Net.Point3D"/> object.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Plane.AbsoluteDistanceToPoint(L2.Net.Point3D)">
            <summary>
            Gets absolute value of distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Plane"/> object.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> to calculate distance to.</param>
            <returns>Absolute value of distance between current <see cref="T:L2.Net.Geometry.Plane"/> object and provided <see cref="T:L2.Net.Point3D"/>.</returns>
        </member>
        <member name="T:L2.Net.Geometry.Cylinder">
            <summary>
            Represents cylindric object struct.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Cylinder.m_Center">
            <summary>
            <see cref="T:L2.Net.Geometry.Cylinder"/> center position.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Cylinder.m_Radius">
            <summary>
            <see cref="T:L2.Net.Geometry.Cylinder"/> radius.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Cylinder.Height">
            <summary>
            <see cref="T:L2.Net.Geometry.Cylinder"/> height.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Cylinder.m_PoweredRadius">
            <summary>
            Pre-calculated powered radius value.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Cylinder.#ctor(L2.Net.Geometry.Vertex,System.Single,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Geometry.Cylinder"/> struct.
            </summary>
            <param name="center"><see cref="T:L2.Net.Geometry.Cylinder"/> center position.</param>
            <param name="radius"><see cref="T:L2.Net.Geometry.Cylinder"/> radius.</param>
            <param name="heigth"><see cref="T:L2.Net.Geometry.Cylinder"/> height.</param>
        </member>
        <member name="M:L2.Net.Geometry.Cylinder.IsInside(L2.Net.Point3D)">
            <summary>
            Indicates if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.Cylinder"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> thats coordinates must be validated.</param>
            <returns>True, if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.Cylinder"/>, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Cylinder.DistanceTo(L2.Net.Point3D)">
            <summary>
            Gets the distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Cylinder"/> object.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> to validate.</param>
            <returns>Distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Cylinder"/> object center.</returns>
        </member>
        <member name="P:L2.Net.Geometry.Cylinder.Center">
            <summary>
            Gets or sets current <see cref="T:L2.Net.Geometry.Cylinder"/> center as <see cref="T:L2.Net.Geometry.Vertex"/>.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.Cylinder.Radius">
            <summary>
            Gets or sets current <see cref="T:L2.Net.Geometry.Cylinder"/> object radius.
            </summary>
        </member>
        <member name="T:L2.Net.Geometry.Polyhedron">
            <summary>
            Represents <see cref="T:L2.Net.Geometry.Polyhedron"/> struct.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Polyhedron.m_Normalized">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Polyhedron"/> was normalized yet.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Polyhedron.m_Triangulated">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Polyhedron"/> was triangulated yet.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Polyhedron.Vertexes">
            <summary>
            Collection of <see cref="T:L2.Net.Geometry.Vertex"/> objects, that geometrically are current <see cref="T:L2.Net.Geometry.Polyhedron"/> vertexes.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Polyhedron.Tetrahedrons">
            <summary>
            Collection of <see cref="T:L2.Net.Geometry.Tetrahedron"/> objects, that contain current <see cref="T:L2.Net.Geometry.Polyhedron"/>.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Polyhedron.#ctor(L2.Net.Geometry.Vertex[])">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Geometry.Polyhedron"/> struct.
            </summary>
            <param name="vertexes">Array of <see cref="T:L2.Net.Geometry.Vertex"/> objects to initialize from.</param>
        </member>
        <member name="M:L2.Net.Geometry.Polyhedron.Normalize">
            <summary>
            Normalizes current <see cref="T:L2.Net.Geometry.Polyhedron"/> object planes.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Polyhedron.Triangulate">
            <summary>
            Triangulates current <see cref="T:L2.Net.Geometry.Polyhedron"/>. 
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Polyhedron.IsInside(L2.Net.Point3D)">
            <summary>
            Indicates if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.Polyhedron"/> object.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> to validate.</param>
            <returns>True, if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.Polyhedron"/>, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Polyhedron.DistanceTo(L2.Net.Point3D)">
            <summary>
            Calculates distance between nearest face of current <see cref="T:L2.Net.Geometry.Polyhedron"/> and provided <see cref="T:L2.Net.Point3D"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> object to calculate distance to.</param>
            <returns>Distance between nearest face of current <see cref="T:L2.Net.Geometry.Polyhedron"/> and provided <see cref="T:L2.Net.Point3D"/> object.</returns>
        </member>
        <member name="P:L2.Net.Geometry.Polyhedron.Normalized">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Polyhedron"/> object was normalized yet.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.Polyhedron.Triangulated">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Polyhedron"/> was triangulated yet.
            </summary>
        </member>
        <member name="T:L2.Net.Geometry.Sphere">
            <summary>
            <see cref="T:L2.Net.Geometry.Sphere"/> zone implementation.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Sphere.m_Center">
            <summary>
            <see cref="T:L2.Net.Geometry.Sphere"/> center position.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Sphere.m_Radius">
            <summary>
            <see cref="T:L2.Net.Geometry.Sphere"/> radius.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Sphere.m_PoweredRadius">
            <summary>
            Pre-calculated powered radius value.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Sphere.#ctor(L2.Net.Geometry.Vertex,System.Single)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Geometry.Sphere"/> struct.
            </summary>
            <param name="center"><see cref="T:L2.Net.Geometry.Sphere"/> center position.</param>
            <param name="radius">Sphere radius.</param>
        </member>
        <member name="M:L2.Net.Geometry.Sphere.IsInside(L2.Net.Point3D)">
            <summary>
            Indicates if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.Sphere"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> thats coordinates must be validated.</param>
            <returns>True, if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Geometry.Sphere"/>, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Sphere.DistanceTo(L2.Net.Point3D)">
            <summary>
            Gets the distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Sphere"/> object.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> to validate.</param>
            <returns>Distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Sphere"/> object.</returns>
        </member>
        <member name="P:L2.Net.Geometry.Sphere.Center">
            <summary>
            Gets or sets current <see cref="T:L2.Net.Geometry.Sphere"/> center as <see cref="T:L2.Net.Geometry.Vertex"/>.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.Sphere.Radius">
            <summary>
            Gets or sets current <see cref="T:L2.Net.Geometry.Sphere"/> object radius.
            </summary>
        </member>
        <member name="T:L2.Net.Geometry.Tetrahedron">
            <summary>
            <see cref="T:L2.Net.Geometry.Tetrahedron"/> struct representation.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Tetrahedron.fConst">
            <summary>
            Calculations constant.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Tetrahedron.m_Normalized">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Tetrahedron"/> was normalized yet.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Tetrahedron.m_Triangulated">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Tetrahedron"/> was triangulated yet.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Tetrahedron.Planes">
            <summary>
            Collection of <see cref="T:L2.Net.Geometry.Plane"/> objects, that geometrically contain current <see cref="T:L2.Net.Geometry.Tetrahedron"/> object.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Tetrahedron.Vertexes">
            <summary>
            Collection of <see cref="T:L2.Net.Geometry.Vertex"/> objects, that geometrically are current <see cref="T:L2.Net.Geometry.Tetrahedron"/> vertexes.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Tetrahedron.#ctor(L2.Net.Geometry.Vertex[])">
            <summary>
            Initializes new instance if <see cref="T:L2.Net.Geometry.Tetrahedron"/> struct.
            </summary>
            <param name="vertexes">Array of 4 <see cref="T:L2.Net.Geometry.Vertex"/> objects to initialize from.</param>
        </member>
        <member name="M:L2.Net.Geometry.Tetrahedron.Normalize">
            <summary>
            Normalizes current <see cref="T:L2.Net.Geometry.Tetrahedron"/> object vertexes. Don't call this method externally.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Tetrahedron.Triangulate">
            <summary>
            Triangulates current <see cref="T:L2.Net.Geometry.Tetrahedron"/> object. Don't call this method externally.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Tetrahedron.DistanceTo(L2.Net.Point3D)">
            <summary>
            Calculates distance between nearest face of current <see cref="T:L2.Net.Geometry.Tetrahedron"/> and provided <see cref="T:L2.Net.Point3D"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> object to calculate distance to.</param>
            <returns>Distance between nearest face of current <see cref="T:L2.Net.Geometry.Tetrahedron"/> and provided <see cref="T:L2.Net.Point3D"/> object.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:L2.Net.Geometry.Tetrahedron.IsInside(L2.Net.Point3D)" -->
        <member name="P:L2.Net.Geometry.Tetrahedron.Normalized">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Tetrahedron"/> was normalized yet.
            </summary>
        </member>
        <member name="P:L2.Net.Geometry.Tetrahedron.Triangulated">
            <summary>
            Indicates if current <see cref="T:L2.Net.Geometry.Tetrahedron"/> was triangulated yet.
            </summary>
        </member>
        <member name="T:L2.Net.Geometry.Vertex">
            <summary>
            Vertex struct.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Vertex.Invalid">
            <summary>
            In L2 math this <see cref="T:L2.Net.Geometry.Vertex"/> is unaccessible.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Vertex.X">
            <summary>
            <see cref="T:L2.Net.Geometry.Vertex"/> X coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Vertex.Y">
            <summary>
            <see cref="T:L2.Net.Geometry.Vertex"/> Y coordinate.
            </summary>
        </member>
        <member name="F:L2.Net.Geometry.Vertex.Z">
            <summary>
            <see cref="T:L2.Net.Geometry.Vertex"/> Z coordinate.
            </summary>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Geometry.Vertex"/> struct.
            </summary>
            <param name="x"><see cref="T:L2.Net.Geometry.Vertex"/> X coordinate.</param>
            <param name="y"><see cref="T:L2.Net.Geometry.Vertex"/> Y coordinate.</param>
            <param name="z"><see cref="T:L2.Net.Geometry.Vertex"/> Z coordinate.</param>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.#ctor(L2.Net.Point3D)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Geometry.Vertex"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> object to initialize from.</param>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.DistanceTo(L2.Net.Point3D)">
            <summary>
            Gets the distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Cylinder"/> object.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> to validate.</param>
            <returns>Distance between provided <see cref="T:L2.Net.Point3D"/> and current <see cref="T:L2.Net.Geometry.Cylinder"/> object center.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.ToString">
            <summary>
            Returns <see cref="T:System.String"/> representation of current <see cref="T:L2.Net.Geometry.Vertex"/> struct.
            </summary>
            <returns><see cref="T:System.String"/> representation of current <see cref="T:L2.Net.Geometry.Vertex"/> struct.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.op_Equality(L2.Net.Geometry.Vertex,L2.Net.Geometry.Vertex)">
            <summary>
            Determines two <see cref="T:L2.Net.Geometry.Vertex"/> structs equality.
            </summary>
            <param name="a">First <see cref="T:L2.Net.Geometry.Vertex"/> to compare.</param>
            <param name="m">Second <see cref="T:L2.Net.Geometry.Vertex"/> to compare.</param>
            <returns>True, if two provided <see cref="T:L2.Net.Geometry.Vertex"/> structs are equal, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.op_Inequality(L2.Net.Geometry.Vertex,L2.Net.Geometry.Vertex)">
            <summary>
            Determines two <see cref="T:L2.Net.Geometry.Vertex"/> structs inequality.
            </summary>
            <param name="a">First <see cref="T:L2.Net.Geometry.Vertex"/> to compare.</param>
            <param name="b">Second <see cref="T:L2.Net.Geometry.Vertex"/> to compare.</param>
            <returns>True, if two provided <see cref="T:L2.Net.Geometry.Vertex"/> structs are inequal, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.op_Equality(L2.Net.Geometry.Vertex,L2.Net.Point3D)">
            <summary>
            Determines one <see cref="T:L2.Net.Geometry.Vertex"/> and other <see cref="T:L2.Net.Point3D"/> coordinates equality.
            </summary>
            <param name="a"><see cref="T:L2.Net.Geometry.Vertex"/> object to compare.</param>
            <param name="b"><see cref="T:L2.Net.Point3D"/> object to compare.</param>
            <returns>True, if x,y and z coordinates of provided <see cref="T:L2.Net.Geometry.Vertex"/> and <see cref="T:L2.Net.Point3D"/> objects are same, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.op_Inequality(L2.Net.Geometry.Vertex,L2.Net.Point3D)">
            <summary>
            Determines one <see cref="T:L2.Net.Geometry.Vertex"/> and other <see cref="T:L2.Net.Point3D"/> coordinates inequality.
            </summary>
            <param name="a"><see cref="T:L2.Net.Geometry.Vertex"/> object to compare.</param>
            <param name="b"><see cref="T:L2.Net.Point3D"/> object to compare.</param>
            <returns>True, if x,y and z coordinates of provided <see cref="T:L2.Net.Geometry.Vertex"/> and <see cref="T:L2.Net.Point3D"/> objects are different, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.Equals(System.Object)">
            <summary>
            Determines if provided <see cref="T:System.Object"/> equals current <see cref="T:L2.Net.Geometry.Vertex"/> struct.
            </summary>
            <param name="obj"><see cref="T:System.Object"/> to compare with current <see cref="T:L2.Net.Geometry.Vertex"/> struct.</param>
            <returns>True, if provided object equals current <see cref="T:L2.Net.Geometry.Vertex"/> struct, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.Equals(L2.Net.Geometry.Vertex)">
            <summary>
            Determines if provided <see cref="T:L2.Net.Geometry.Vertex"/> struct equals current <see cref="T:L2.Net.Geometry.Vertex"/> struct.
            </summary>
            <param name="other"><see cref="T:L2.Net.Geometry.Vertex"/> struct to compare current to.</param>
            <returns>True, if provided <see cref="T:L2.Net.Geometry.Vertex"/> struct equals current, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Geometry.Vertex.GetHashCode">
            <summary>
            Gets current <see cref="T:L2.Net.Geometry.Vertex"/> has code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:L2.Net.ZoneActivatedEventHandler">
            <summary>
            Represents method that will handle zone activation event.
            </summary>
        </member>
        <member name="T:L2.Net.ZoneDeactivatedEventHandler">
            <summary>
            Represents method that will handle zone de-activation event.
            </summary>
        </member>
        <member name="T:L2.Net.ZoneEnterEventHandler">
            <summary>
            Represents method that will handle <see cref="T:L2.Net.Mobiles.Mobile"/> entering <see cref="T:L2.Net.Zone"/> event.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:L2.Net.ZoneLeaveEventHandler">
            <summary>
            Represents method that will handle <see cref="T:L2.Net.Mobiles.Mobile"/> leaving <see cref="T:L2.Net.Zone"/> event.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:L2.Net.Zone">
            <summary>
            Abstract class for all world zones. (<see cref="T:L2.Net.ICompilable"/> interface must be implemented on on external scripts.)
            </summary>
        </member>
        <member name="F:L2.Net.Zone.m_TimesInUse">
            <summary>
            Debug counter value.
            </summary>
        </member>
        <member name="F:L2.Net.Zone.m_Zones">
            <summary>
            Collection of <see cref="T:L2.Net.Geometry.IZone"/> objects, that current <see cref="T:L2.Net.Zone"/> contains.
            </summary>
        </member>
        <member name="F:L2.Net.Zone.m_UniqueID">
            <summary>
            Current <see cref="T:L2.Net.Zone"/> unique identifier.
            </summary>
        </member>
        <member name="F:L2.Net.Zone.m_Name">
            <summary>
            Current <see cref="T:L2.Net.Zone"/> name.
            </summary>
        </member>
        <member name="F:L2.Net.Zone.m_IsActive">
            <summary>
            Indicates if current <see cref="T:L2.Net.Zone"/> is active.
            </summary>
        </member>
        <member name="E:L2.Net.Zone.OnActivated">
            <summary>
            Occurs when current <see cref="T:L2.Net.Zone"/> was activated.
            </summary>
        </member>
        <member name="E:L2.Net.Zone.OnDeActivated">
            <summary>
            Occurs when current <see cref="T:L2.Net.Zone"/> was de-activated.
            </summary>
        </member>
        <member name="E:L2.Net.Zone.OnEnter">
            <summary>
            Occurs when some <see cref="T:L2.Net.Mobiles.Mobile"/> enters current <see cref="T:L2.Net.Zone"/>.
            </summary>
        </member>
        <member name="E:L2.Net.Zone.OnLeave">
            <summary>
            Occurs when some <see cref="T:L2.Net.Mobiles.Mobile"/> leaves current <see cref="T:L2.Net.Zone"/>.
            </summary>
        </member>
        <member name="M:L2.Net.Zone.#ctor(L2.Net.Geometry.IZone[])">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Zone"/> class.
            </summary>
            <param name="zones">Array of <see cref="T:L2.Net.Geometry.IZone"/> objects, that contain current <see cref="T:L2.Net.Zone"/>.</param>
        </member>
        <member name="M:L2.Net.Zone.IsInside(L2.Net.Point3D)">
            <summary>
            Indicates if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Zone"/> geometrical space.
            </summary>
            <param name="p"><see cref="T:L2.Net.Point3D"/> object to validate.</param>
            <returns>True, if provided <see cref="T:L2.Net.Point3D"/> is inside current <see cref="T:L2.Net.Zone"/>, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Zone.AddIZone(L2.Net.Geometry.IZone)">
            <summary>
            Adds provided <see cref="T:L2.Net.Geometry.IZone"/> object to current <see cref="T:L2.Net.Zone"/> geometrical zones collection.
            </summary>
            <param name="zone"></param>
        </member>
        <member name="M:L2.Net.Zone.ClearZones">
            <summary>
            Clears currently containing <see cref="T:L2.Net.Geometry.IZone"/> objects.
            </summary>
        </member>
        <member name="P:L2.Net.Zone.Active">
            <summary>
            Gets or sets value, indicating that current <see cref="T:L2.Net.Zone"/> is active.
            </summary>
        </member>
        <member name="M:L2.Net.Zone.Activate">
            <summary>
            Activates current <see cref="T:L2.Net.Zone"/>.
            </summary>
        </member>
        <member name="M:L2.Net.Zone.DeActivate">
            <summary>
            De-activates current <see cref="T:L2.Net.Zone"/>.
            </summary>
        </member>
        <member name="M:L2.Net.Zone.Enter(L2.Net.Mobiles.Mobile)">
            <summary>
            Handles <see cref="T:L2.Net.Mobiles.Mobile"/> <see cref="T:L2.Net.Zone"/> entering.
            </summary>
            <param name="m"><see cref="T:L2.Net.Mobiles.Mobile"/> that enters current <see cref="T:L2.Net.Zone"/>.</param>
        </member>
        <member name="M:L2.Net.Zone.Leave(L2.Net.Mobiles.Mobile)">
            <summary>
            Handles <see cref="T:L2.Net.Mobiles.Mobile"/> <see cref="T:L2.Net.Zone"/> leaving.
            </summary>
            <param name="m"><see cref="T:L2.Net.Mobiles.Mobile"/>, that leaves current <see cref="T:L2.Net.Zone"/>.</param>
        </member>
        <member name="P:L2.Net.Zone.UniqueID">
            <summary>
            Gets current <see cref="T:L2.Net.Zone"/> unique identifier.
            </summary>
        </member>
        <member name="P:L2.Net.Zone.Name">
            <summary>
            Gets or sets name of current <see cref="T:L2.Net.Zone"/>.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.IMobile">
            <summary>
            Base mobiles interface.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Name">
            <summary>
            Gets or sets mobile name.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Title">
            <summary>
            Gets or sets mobile title.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Alive">
            <summary>
            Gets or sets value, indicating if mobile is alive.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.AutoAttackable">
            <summary>
            Gets or sets value, indicating if mobile is auto-attackable.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Freezed">
            <summary>
            Gets or sets value, indicating that mobile is freezed.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Visible">
            <summary>
            Gets or sets value, indicating if mobile is visible.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.CollisionRadius">
            <summary>
            Gets or sets mobile's collision radius.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.CollisionHeight">
            <summary>
            Gets or sets mobile's collision height.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Level">
            <summary>
            Gets or sets mobile's level.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.HP">
            <summary>
            Gets or sets mobile health points.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MaxHP">
            <summary>
            Gets or sets maximum value of mobile health points.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MP">
            <summary>
            Gets or sets mobile mana points.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MaxMP">
            <summary>
            Gets or sets maximum value of mobile mana points.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.WalkSpeed">
            <summary>
            Gets or sets mobile walk speed.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.RunSpeed">
            <summary>
            Gets or sets mobile run speed.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.HPRegen">
            <summary>
            Gets or sets mobile health points regeneration value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MPRegen">
            <summary>
            Gets or sets mobile mana points regeneration value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.HPRegenRate">
            <summary>
            Gets or sets mobile health points regeneration rate value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MPRegenRate">
            <summary>
            Gets or sets mobile mana points regeneration rate value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.Exp">
            <summary>
            Gets or sets mobile experience value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.SP">
            <summary>
            Gets or sets mobile skill points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.STR">
            <summary>
            Gets or sets mobile STR value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.CON">
            <summary>
            Gets or sets mobile CON value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MEN">
            <summary>
            Gets or sets mobile MEN value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.DEX">
            <summary>
            Gets or sets mobile DEX value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.WIT">
            <summary>
            Gets or sets mobile WIT value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.INT">
            <summary>
            Gets or sets mobile INT value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.PAtk">
            <summary>
            Gets or sets mobile physical attack strength value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MAtk">
            <summary>
            Gets or sets mobile magic attack strength value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.PDef">
            <summary>
            Gets or sets mobile physical defense value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MDef">
            <summary>
            Gets or sets mobile magic defense value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.PAtkSpd">
            <summary>
            Gets or sets mobile physical attack speed.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.MAtkSpd">
            <summary>
            Gets or sets mobile magic attack speed.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMobile.PAtkRange">
            <summary>
            Gets or sets mobile physical attack range.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.AppearingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnAppearing"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.DisappearingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnDissapearing"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.AggressiveActionEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnAggressiveAction"/> event.
            </summary>
            <param name="attacker">Attacked <see cref="T:L2.Net.Mobiles.Mobile"/>.</param>
        </member>
        <member name="T:L2.Net.Mobiles.DieEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnDying"/> event.
            </summary>
            <param name="killer">Killer <see cref="T:L2.Net.Mobiles.Mobile"/>.</param>
        </member>
        <member name="T:L2.Net.Mobiles.ResurrectEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnResurrecting"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.SpeedChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnSpeedChanged"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.LevelChangingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnLevelChanging"/> event.
            </summary>
            <param name="value">Positive or negative additional levels count.</param>
        </member>
        <member name="T:L2.Net.Mobiles.FreezeStateLandingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnFreezeLanding"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.FreezeStateRemovingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnFreezeRemoving"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.NameChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnNameChanged"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.TitleChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnTitleChanged"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.BecomeRunningEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnBecomeRunning"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.BecomeWalkingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnBecomeWalking"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.NameColorChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnNameColorChanged"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.TitleColorChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Mobile.OnTitleColorChanged"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.Mobile">
            <summary>
            Base class for all mobiles in L2 world.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnAppearing">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> appears in the world (or teleports).
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnDissapearing">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> disappears from the world (or teleports).
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnAggressiveAction">
            <summary>
            Occurs when some aggressive action is done over <see cref="T:L2.Net.Mobiles.Mobile"/>.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnDying">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> dies.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnResurrecting">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> is resurrecting.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnSpeedChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> speed changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnLevelChanging">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> level is changing.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnFreezeLanding">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> enters freeze state. 
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnFreezeRemoving">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> leaves freeze state.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnNameChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> name changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnTitleChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> title changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnNameColorChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> name color changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnTitleColorChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> title color changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnBecomeRunning">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> goes to running mode.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Mobile.OnBecomeWalking">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Mobile"/> goes to walking mode.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_UniqueID">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> unique identifier.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_HP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> health points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MaxHP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> max health points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> mana points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MaxMP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> max mana points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_AutoAttackable">
            <summary>
            Indicates if <see cref="T:L2.Net.Mobiles.Mobile"/> is auto-attackable.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Freezed">
            <summary>
            Indicates if <see cref="T:L2.Net.Mobiles.Mobile"/> is freezed.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Visible">
            <summary>
            Indicates if <see cref="T:L2.Net.Mobiles.Mobile"/> is visible.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_CollisionHeight">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> collision height.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_CollisionRadius">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> collision radius.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Level">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> level.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_WalkSpeed">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> walking speed value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_RunSpeed">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> running speed value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Position">
            <summary>
            Current <see cref="T:L2.Net.Mobiles.Mobile"/> <see cref="P:L2.Net.Mobiles.Mobile.Position"/> value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Name">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> name.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Title">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> title.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_NameColor">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> name color value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_TitleColor">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> title color value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MovingType">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> <see cref="P:L2.Net.Mobiles.Mobile.MovingState"/> value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_HPRegen">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> health points regeneration value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MPRegen">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> mana points regeneration value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_HPRegenRate">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> health points regeneration rate value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MPRegenRate">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> mana points regeneration rate value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_Exp">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> experience value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_SP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> skill points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_STR">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> STR value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_CON">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> CON value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MEN">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> MEN value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_DEX">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> DEX value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_WIT">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> WIT value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_INT">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> INT value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_PAtk">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> physical attack strength value
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MAtk">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> magic attack strength value
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_PDef">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> physical defense value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MDef">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> magic defense value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_PAtkSpd">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> physical attack speed.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_MAtkSpd">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> magic attack speed.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_PAtkRange">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> physical attack range.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Mobile.m_ActionTimer">
            <summary>
            General <see cref="T:L2.Net.Mobiles.Mobile"/> actions timer.
            </summary>
        </member>
        <member name="M:L2.Net.Mobiles.Mobile.#ctor">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Mobiles.Mobile"/> object.
            </summary>
        </member>
        <member name="M:L2.Net.Mobiles.Mobile.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Mobiles.Mobile"/> object.
            </summary>
            <param name="uniqueID"><see cref="T:L2.Net.Mobiles.Mobile"/> unique identifier.</param>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.UniqueID">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> unique identifier.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.CollisionHeight">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> collision height.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.CollisionRadius">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> collision radius.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Position">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> <see cref="P:L2.Net.Mobiles.Mobile.Position"/> value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.HP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> health points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MaxHP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> max health points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> mana points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MaxMP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> max mana points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Alive">
            <summary>
            Indicates if <see cref="T:L2.Net.Mobiles.Mobile"/> is alive.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.AutoAttackable">
            <summary>
            Gets or sets value, indicating that current <see cref="T:L2.Net.Mobiles.Mobile"/> is auto-attackable.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Freezed">
            <summary>
            Gets or sets value, indicating if <see cref="T:L2.Net.Mobiles.Mobile"/> is currently freezed.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Visible">
            <summary>
            Gets or sets value, indicating if <see cref="T:L2.Net.Mobiles.Mobile"/> is visible.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Level">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> level value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.RunSpeed">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> running mode speed value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.WalkSpeed">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> walking mode speed value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Name">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> name.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Title">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> title.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MovingState">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> <see cref="P:L2.Net.Mobiles.Mobile.MovingState"/> value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.NameColor">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> name color value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.TitleColor">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> title color value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.HPRegen">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> health points regeneration value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MPRegen">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> mana points regeneration value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.HPRegenRate">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> health points regeneration rate value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MPRegenRate">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> mana points regeneration rate value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.STR">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> STR value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.CON">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> CON value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MEN">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> MEN value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.DEX">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> DEX value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.WIT">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> WIT value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.INT">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> INT value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.Exp">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> experience value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.SP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> skill points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.PAtk">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> physical attack strength value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MAtk">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> magic attack strength value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.PDef">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> physical defense value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MDef">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> magic defense value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.PAtkSpd">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> physical attack speed value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.MAtkSpd">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> magic attack speed value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Mobile.PAtkRange">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Mobile"/> physical attack range.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.MovingState">
            <summary>
            <see cref="T:L2.Net.Mobiles.Mobile"/> moving state types.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.MovingState.Walking">
            <summary>
            Walking state.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.MovingState.Running">
            <summary>
            Running state.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.BeginEnterWorldEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnBeginEnterWorld"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.EndEnterWorldEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnEndEnterWorld"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.BecomeSittingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnSittingDown"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.BecomeStandingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnStandingUp"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.AppearanceChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnAppearanceChanged"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.RecommendationsHaveValueChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnRecommendationsHaveValueChanged"/> event.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:L2.Net.Mobiles.RecommendationsLeftValueChangedEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Actor.OnRecommendationsLeftValueChanged"/> event.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:L2.Net.Mobiles.Actor">
            <summary>
            Actor class.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnAppearing">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> appears in the world (or teleports).
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnDissapearing">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> disappears from the world (or teleports).
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnAggressiveAction">
            <summary>
            Occurs when some aggressive action is done over <see cref="T:L2.Net.Mobiles.Mobile"/>.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnDying">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> dies.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnResurrecting">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> is resurrecting.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnSpeedChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> speed changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnLevelChanging">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> level is changing.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnFreezeLanding">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> enters freeze state. 
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnFreezeRemoving">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> leaves freeze state.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnNameChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> name changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnTitleChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> title changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnNameColorChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> name color changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnTitleColorChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> title color changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnBecomeRunning">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> goes to running mode.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnBecomeWalking">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> goes to walking mode.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnBeginEnterWorld">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> begins enter into the world.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnEndEnterWorld">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> ends enter into the world.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnSittingDown">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> sits on the ground.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnStandingUp">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Actor"/> stands up.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnAppearanceChanged">
            <summary>
            Occurs after something changes in actor's appearance.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnRecommendationsHaveValueChanged">
            <summary>
            Occurs when amount of having recommendation changes. 
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Actor.OnRecommendationsLeftValueChanged">
            <summary>
            Occurs when amount of left recommendations changes.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_CP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> combat points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_MaxCP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> max combat points value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_PK">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> PK counter value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_PVP">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> PVP counter value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_Karma">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> karma value.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_RecommendationsHave">
            <summary>
            Amount of recommendations, that <see cref="T:L2.Net.Mobiles.Actor"/> currently have.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_RecommendationsLeft">
            <summary>
            Amount of recommendations, that <see cref="T:L2.Net.Mobiles.Actor"/> can evaluate.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_OwnedMobile">
            <summary>
            <see cref="P:L2.Net.Mobiles.Actor.ControlledMobile"/> object (pet/summon).
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_Gender">
            <summary>
            Gender of <see cref="T:L2.Net.Mobiles.Actor"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_Race">
            <summary>
            Race of <see cref="T:L2.Net.Mobiles.Actor"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_HairColor">
            <summary>
            Hair color of <see cref="T:L2.Net.Mobiles.Actor"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_HairShape">
            <summary>
            Hair shape of <see cref="T:L2.Net.Mobiles.Actor"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_FaceShape">
            <summary>
            Face shape of <see cref="T:L2.Net.Mobiles.Actor"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.m_WaitingState">
            <summary>
            Current <see cref="P:L2.Net.Mobiles.Actor.WaitingState"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.LastSavedTime">
            <summary>
            <see cref="T:System.DateTime"/> where is stored last time <see cref="T:L2.Net.Mobiles.Actor"/> data was sent to cache.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Actor.SaveMeDelegate">
            <summary>
            Delegate to method, that can save <see cref="T:L2.Net.Mobiles.Actor"/> immediately.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.CP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> combat points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.MaxCP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> max combat points value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.PK">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> PK counter value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.PvP">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> PVP counter value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.Karma">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> karma value.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.RecomendationsHave">
            <summary>
            Gets or sets amount of recommendations, that <see cref="T:L2.Net.Mobiles.Actor"/> have.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.RecomendationsLeft">
            <summary>
            Gets or sets amount of recommendations, currently aviable for <see cref="T:L2.Net.Mobiles.Actor"/>.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.WaitingState">
            <summary>
            Gets or sets value, indicating <see cref="T:L2.Net.Mobiles.Actor"/> <see cref="P:L2.Net.Mobiles.Actor.WaitingState"/>.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.Gender">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> gender.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.Race">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> race.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.HairColor">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> hair color index.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.HairShape">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> hair shape index.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.FaceShape">
            <summary>
            Gets or sets <see cref="T:L2.Net.Mobiles.Actor"/> face shape index.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.Actor.ControlledMobile">
            <summary>
            Provides access to <see cref="P:L2.Net.Mobiles.Actor.ControlledMobile"/>, that <see cref="T:L2.Net.Mobiles.Actor"/> owns.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.Appearance">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> appearing variations.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Male">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is male.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Female">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is female.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Human">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is Human.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Elf">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is Elf.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.DarkElf">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is Dark Elf.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Orc">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is Orc.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Dwarf">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is Dwarf.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.Kamael">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> is Kamael.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.A">
            <summary>
            Style A.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.B">
            <summary>
            Style B.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.C">
            <summary>
            Style C.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.D">
            <summary>
            Style D.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.E">
            <summary>
            Style E.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.Appearance.F">
            <summary>
            Style F.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.WaitingState">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/> waiting types.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.WaitingState.Sitting">
            <summary>
            Sitting state.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.WaitingState.Standing">
            <summary>
            Standing state.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.TalkingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.Citizen.OnTalk"/> event.
            </summary>
            <param name="requester"></param>
        </member>
        <member name="T:L2.Net.Mobiles.Citizen">
            <summary>
            Base class for citizen npcs type.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnTalk">
            <summary>
            Occurs when some <see cref="T:L2.Net.Mobiles.Actor"/> talks to current <see cref="T:L2.Net.Mobiles.Citizen"/> mobile object.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnAppearing">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> appears in the world (or teleports).
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnDissapearing">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> disappears from the world (or teleports).
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnAggressiveAction">
            <summary>
            Occurs when some aggressive action is done over <see cref="T:L2.Net.Mobiles.Citizen"/>.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnDying">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> dies.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnResurrecting">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> is resurrecting.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnSpeedChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> speed changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnLevelChanging">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> level is changing.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnFreezeLanding">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> enters freeze state. 
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnFreezeRemoving">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> leaves freeze state.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnNameChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> name changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnTitleChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> title changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnNameColorChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> name color changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnTitleColorChanged">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> title color changes.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnBecomeRunning">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> goes to running mode.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.Citizen.OnBecomeWalking">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.Citizen"/> goes to walking mode.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.ControlledMobile">
            <summary>
            Abstract class for controlled mobiles (pet/summon).
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.ControlledMobile.m_Master">
            <summary>
            <see cref="T:L2.Net.Mobiles.Actor"/>, that controls current <see cref="T:L2.Net.Mobiles.ControlledMobile"/>.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.ControlledMobile.OnMasterAttacked">
            <summary>
            Occurs when <see cref="P:L2.Net.Mobiles.ControlledMobile.Master"/> is under attack.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.ControlledMobile.OnMasterCalls">
            <summary>
            Occurs when <see cref="P:L2.Net.Mobiles.ControlledMobile.Master"/> calls <see cref="T:L2.Net.Mobiles.IControlled"/> mobile.
            </summary>
        </member>
        <member name="M:L2.Net.Mobiles.ControlledMobile.#ctor(L2.Net.Mobiles.Actor,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Mobiles.ControlledMobile"/>.
            </summary>
            <param name="owner">Owner of current <see cref="T:L2.Net.Mobiles.ControlledMobile"/> creature.</param>
            <param name="uiniqueID"><see cref="T:L2.Net.Mobiles.ControlledMobile"/> unique identifier.</param>
        </member>
        <member name="P:L2.Net.Mobiles.ControlledMobile.Master">
            <summary>
            Provides access to current <see cref="T:L2.Net.Mobiles.ControlledMobile"/> master.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.MasterAttackedEventHandler">
            <summary>
            Represents method that will handle '<see cref="T:L2.Net.Mobiles.IMaster"/> under attack' event.
            </summary>
            <param name="attackers"></param>
        </member>
        <member name="T:L2.Net.Mobiles.MasterCallEventHandler">
            <summary>
            Represents method that will handle <see cref="T:L2.Net.Mobiles.IMaster"/> clall mobile to come.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.IControlled">
            <summary>
            Controlled creature interface.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.IControlled.OnMasterAttacked">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.IMaster"/> is under attack.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.IControlled.OnMasterCalls">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.IMaster"/> calls <see cref="T:L2.Net.Mobiles.IControlled"/> mobile.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IControlled.Master">
            <summary>
            Gets <see cref="T:L2.Net.Mobiles.Actor"/> that currently controls creature.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.IMaster">
            <summary>
            Master interface.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.IMaster.ControlledMobile">
            <summary>
            Gets creature, currently controlled by <see cref="T:L2.Net.Mobiles.IMaster"/>.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.IMasterOrControlled">
            <summary>
            Master (player) and his controlled creature (pet/summon) common interface.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.AIActivatingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.DefaultNpc.OnAIActivating"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.AIDeactivatingEventHandler">
            <summary>
            Represents the method that will handle <see cref="E:L2.Net.Mobiles.DefaultNpc.OnAIDeactivating"/> event.
            </summary>
        </member>
        <member name="T:L2.Net.Mobiles.DefaultNpc">
            <summary>
            Base npc class.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.DefaultNpc.OnAIActivating">
            <summary>
            Occurs when <see cref="T:L2.Net.Mobiles.DefaultNpc"/> AI is activating.
            </summary>
        </member>
        <member name="E:L2.Net.Mobiles.DefaultNpc.OnAIDeactivating">
            <summary>
             Occurs when <see cref="T:L2.Net.Mobiles.DefaultNpc"/> AI is deactivating.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.DefaultNpc.m_Active">
            <summary>
            Value, that indicates if current <see cref="T:L2.Net.Mobiles.DefaultNpc"/> AI is enabled.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.DefaultNpc.m_RightHandItem">
            <summary>
            Right hand item id.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.DefaultNpc.m_ChestItem">
            <summary>
            Chest item id.
            </summary>
        </member>
        <member name="F:L2.Net.Mobiles.DefaultNpc.m_LeftHandItem">
            <summary>
            Left hand item id.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.DefaultNpc.RightHandItem">
            <summary>
            Gets or sets right hand item id.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.DefaultNpc.ChestItem">
            <summary>
            Gets or sets chest item id.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.DefaultNpc.LeftHandItem">
            <summary>
            Gets or sets left hand item id.
            </summary>
        </member>
        <member name="P:L2.Net.Mobiles.DefaultNpc.Active">
            <summary>
            Gets or sets value, indicating if current <see cref="T:L2.Net.Mobiles.DefaultNpc"/> AI is active.
            </summary>
        </member>
        <member name="T:L2.Net.Network.NetworkHelper">
            <summary>
            Provides some help methods related to inner network activity.
            </summary>
        </member>
        <member name="T:L2.Net.Network.NetworkHelper.RemoteServiceInfo">
            <summary>
            Represents struct that contains info about remote service while it's attempting to connect.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkHelper.RemoteServiceInfo.ServiceId">
            <summary>
            Gets remote service unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkHelper.RemoteServiceInfo.ServiceType">
            <summary>
            Gets remote service type;
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkHelper.RemoteServiceInfo.#ctor(System.Byte,L2.Net.ServiceType)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.NetworkHelper.RemoteServiceInfo"/> struct.
            </summary>
            <param name="serviceId">Remote service unique id.</param>
            <param name="serviceType">Remote service type.</param>
        </member>
        <member name="F:L2.Net.Network.NetworkHelper.RemoteServiceInfo.Empty">
            <summary>
            Invalid <see cref="T:L2.Net.Network.NetworkHelper.RemoteServiceInfo"/> equivalent.
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkHelper.GetServiceInfo(System.Net.Sockets.Socket)">
            <summary>
            Gets <see cref="T:L2.Net.Network.NetworkHelper.RemoteServiceInfo"/> object for provided <see cref="T:System.Net.Sockets.Socket"/> object.
            </summary>
            <param name="serviceSocket"><see cref="T:System.Net.Sockets.Socket"/> to get info about.</param>
            <returns><see cref="T:L2.Net.Network.NetworkHelper.RemoteServiceInfo"/> object if received data is valid.</returns>
        </member>
        <member name="M:L2.Net.Network.NetworkHelper.SetCommonSocketOptions(System.Net.Sockets.Socket@)">
            <summary>
            Sets some common socket options, used in communication between both server and client sides.
            </summary>
            <param name="socket"><see cref="T:System.Net.Sockets.Socket"/> object, for which options must be applied.</param>
        </member>
        <member name="M:L2.Net.Network.NetworkHelper.CloseSocket(System.Net.Sockets.Socket@)">
            <summary>
            Closes provided socket connection.
            </summary>
            <param name="socket">Socket to be closed.</param>
        </member>
        <member name="T:L2.Net.Network.OnFirewallEnabledEventHandler">
            <summary>
            <see cref="T:L2.Net.Network.Firewall"/> enabled action delegate.
            </summary>
        </member>
        <member name="T:L2.Net.Network.OnFirewallDisabledEventHandler">
            <summary>
            <see cref="T:L2.Net.Network.Firewall"/> disabled action delegate.
            </summary>
        </member>
        <member name="T:L2.Net.Network.OnFirewallBypassRejectedEventHandler">
            <summary>
            <see cref="T:L2.Net.Network.Firewall"/> bypass rejected action delegate.
            </summary>
            <param name="socket">Connected <see cref="T:System.Net.Sockets.Socket"/> object.</param>
        </member>
        <member name="T:L2.Net.Network.OnFirewallBypassAllowedEventHandler">
            <summary>
            <see cref="T:L2.Net.Network.Firewall"/> bypass allowed action delegate.
            </summary>
            <param name="socket">Connected <see cref="T:System.Net.Sockets.Socket"/> object.</param>
        </member>
        <member name="T:L2.Net.Network.Firewall">
            <summary>
            Represents simple firewall class.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Firewall.m_Enabled">
            <summary>
            Indicates if <see cref="T:L2.Net.Network.Firewall"/> is currently enabled.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Firewall.OnEnabled">
            <summary>
            Raises after firewall was enabled.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Firewall.OnDisabled">
            <summary>
            Raises after firewall was disabled.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Firewall.OnBypassAllowed">
            <summary>
            Raises after firewall allowed socket.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Firewall.OnBypassRejected">
            <summary>
            Raises after firewall rejected socket.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Firewall.ValidateRequest(System.Net.Sockets.Socket)">
            <summary>
            Validates socket connection. Note: if firewall is disabled and provided socket object is not null, always allows connection.
            </summary>
            <param name="socket"><see cref="T:System.Net.Sockets.Socket"/> to validate.</param>
            <returns>True, if socket is valid, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Network.Firewall.ValidateRules(System.Net.Sockets.Socket)">
            <summary>
            Checks that socket is valid for current rules collection.
            </summary>
            <param name="socket"><see cref="T:System.Net.Sockets.Socket"/> object to validate.</param>
            <returns>True, if socket is valid, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.Network.Firewall.Enable">
            <summary>
            Enables firewall.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Firewall.Disable">
            <summary>
            Disables firewall.
            </summary>
        </member>
        <member name="P:L2.Net.Network.Firewall.Enabled">
            <summary>
            Sets firewall enabled / disabled, gets it current state.
            </summary>
        </member>
        <member name="T:L2.Net.Network.PacketHandleDelegate">
            <summary>
            Delegate for packet handling
            </summary>
            <param name="packet">Incoming packet</param>
        </member>
        <member name="T:L2.Net.Network.InnerNetworkClient">
            <summary>
            Represents inner network client (remote) connection class.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkClient.m_ServiceId">
            <summary>
            Service unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkClient.m_ServiceType">
            <summary>
            Service type.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkClient.RemoteServiceSettings">
            <summary>
            Remote service settings.
            </summary>
        </member>
        <member name="E:L2.Net.Network.InnerNetworkClient.OnDisconnected">
            <summary>
            Fires when connection is lost or broken.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkClient.HandleDelegate">
            <summary>
            Packet handling method.
            </summary>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.#ctor">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.InnerNetworkClient"/> object.
            </summary>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.#ctor(System.Byte,L2.Net.ServiceType,System.Net.Sockets.Socket,L2.Net.Network.PacketHandleDelegate)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.InnerNetworkClient"/> object.
            </summary>
            <param name="serviceId">Remote service unique id.</param>
            <param name="serviceType">Remote service type.</param>
            <param name="socket"><see cref="T:System.Net.Sockets.Socket"/> used by connection.</param>
            <param name="handleDelegate">Service Handle Delegate, if null packet will not be handled</param>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.#ctor(System.Byte,L2.Net.ServiceType,System.Net.Sockets.Socket)">
            <summary>
            Creates new instance of <see cref="T:L2.Net.Network.InnerNetworkClient"/> object.
            </summary>
            <param name="serviceId">Service unique id.</param>
            <param name="serviceType">Service type.</param>
            <param name="socket">Service <see cref="T:System.Net.Sockets.Socket"/> object.</param>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.Handle(L2.Net.Packet)">
            <summary>
            Handles incoming packet.
            </summary>
            <param name="packet">Incoming packet.</param>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.BeginReceive">
            <summary>
            Begins receive from connection socket.
            </summary>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Receive <see cref="T:System.AsyncCallback"/> method.
            </summary>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.Send(L2.Net.Packet)">
            <summary>
            Sends <see cref="T:L2.Net.Packet"/> to remote side.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to send.</param>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkClient.ReceiveData(System.Byte[],System.Int32)">
            <summary>
            Creates packet from received buffer.
            </summary>
            <param name="buffer">Received buffer.</param>
            <param name="length">Received buffer length.</param>
        </member>
        <member name="P:L2.Net.Network.InnerNetworkClient.ServiceID">
            <summary>
            Gets or sets connected service unique id.
            </summary>
        </member>
        <member name="P:L2.Net.Network.InnerNetworkClient.ServiceType">
            <summary>
            Gets or sets connected <see cref="P:L2.Net.Network.InnerNetworkClient.ServiceType"/>.
            </summary>
        </member>
        <member name="T:L2.Net.Network.InnerNetworkConnection">
            <summary>
            Represents inner network connection class.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkConnection.RemoteEndPoint">
            <summary>
            Remote service <see cref="T:System.Net.IPEndPoint"/> data.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkConnection.m_ReconnectTimer">
            <summary>
            Reconnect <see cref="T:System.Timers.Timer"/> object.
            </summary>
        </member>
        <member name="F:L2.Net.Network.InnerNetworkConnection.ReconnectInterval">
            <summary>
            Reconnect interval, 5 seconds by default.
            </summary>
        </member>
        <member name="E:L2.Net.Network.InnerNetworkConnection.OnConnected">
            <summary>
            Occurs after <see cref="T:L2.Net.Network.InnerNetworkConnection"/> object connected to remote service.
            </summary>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkConnection.#ctor(System.Net.IPEndPoint,System.TimeSpan)">
            <summary>
            Initializes new instance of inner network connection.
            </summary>
            <param name="remoteEndPoint">Remote endpoint.</param>
            <param name="reconnectInterval">Reconnect interval.</param>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkConnection.BeginConnect">
            <summary>
            Attempts to connect to remote service.
            </summary>
            <exception cref="T:System.InvalidOperationException" />
        </member>
        <member name="M:L2.Net.Network.InnerNetworkConnection.TryConnect(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            <paramref name="sender"/> <see cref="E:System.Timers.Timer.Elapsed"/> event handler for current connection.
            </summary>
        </member>
        <member name="M:L2.Net.Network.InnerNetworkConnection.SetRemoteService(System.Byte,L2.Net.ServiceType)">
            <summary>
            Sets remote service id and <see cref="T:L2.Net.ServiceType"/>.
            </summary>
            <param name="remoteServiceID">Remote service id.</param>
            <param name="remoteServiceType">Remote <see cref="T:L2.Net.ServiceType"/>.</param>
        </member>
        <member name="T:L2.Net.Network.OnListenerStartedEventHandler">
            <summary>
            Listener start action delegate.
            </summary>
        </member>
        <member name="T:L2.Net.Network.OnListenerStoppedEventHandler">
            <summary>
            Listener stop action delegate.
            </summary>
        </member>
        <member name="T:L2.Net.Network.OnListenerTerminatedEventHandler">
            <summary>
            Listener termination action delegate.
            </summary>
        </member>
        <member name="T:L2.Net.Network.OnConnectionAcceptedEventHandler">
            <summary>
            Accept connection delegate.
            </summary>
            <param name="socket">Accepted socket.</param>
        </member>
        <member name="T:L2.Net.Network.OnErrorAction">
            <summary>
            Possible actions after some service error occurred.
            </summary>
        </member>
        <member name="F:L2.Net.Network.OnErrorAction.Throw">
            <summary>
            Ignore error.
            </summary>
        </member>
        <member name="F:L2.Net.Network.OnErrorAction.Terminate">
            <summary>
            Terminate service.
            </summary>
        </member>
        <member name="T:L2.Net.Network.Listener">
            <summary>
            Represents network listener class.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Listener.AcceptedConnections">
            <summary>
            Gets the number of connections, accepted by listener.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Listener.LocalEndPoint">
            <summary>
            Local end point.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Listener.Backlog">
            <summary>
            Listening connections count.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Listener.ServiceSocket">
            <summary>
            Service <see cref="T:System.Net.Sockets.Socket"/> object.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Listener.Firewall">
            <summary>
            Service <see cref="F:L2.Net.Network.Listener.Firewall"/> object.
            </summary>
        </member>
        <member name="F:L2.Net.Network.Listener.m_Active">
            <summary>
            Indicates if listener is active.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Listener.OnStarted">
            <summary>
            Raised after listener was started. 
            </summary>
        </member>
        <member name="E:L2.Net.Network.Listener.OnStopped">
            <summary>
            Raised after listener was stopped.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Listener.OnTerminated">
            <summary>
            Raised after listener was terminated.
            </summary>
        </member>
        <member name="E:L2.Net.Network.Listener.OnConnectionAccepted">
            <summary>
            Raised after new connection was accepted by listener.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.Listener"/> class.
            </summary>
            <param name="localEndPoint">Service local endpoint.</param>
            <param name="backlog">Service backlog.</param>
        </member>
        <member name="M:L2.Net.Network.Listener.Firewall_OnBypassRejected(System.Net.Sockets.Socket)">
            <summary>
            Executes when firewall rejects socket.
            </summary>
            <param name="socket">Rejected <see cref="T:System.Net.Sockets.Socket"/> object.</param>
        </member>
        <member name="M:L2.Net.Network.Listener.Firewall_OnBypassAllowed(System.Net.Sockets.Socket)">
            <summary>
            Executes when firewall allows socket activity.
            </summary>
            <param name="socket">Accepted <see cref="T:System.Net.Sockets.Socket"/> object.</param>
        </member>
        <member name="M:L2.Net.Network.Listener.EnableFirewall">
            <summary>
            Enables listener firewall.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.DisableFirewall">
            <summary>
            Disables listener firewall.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.Firewall_OnDisabled">
            <summary>
            Executes when firewall was disabled.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.Firewall_OnEnabled">
            <summary>
            Executes when firewall was enabled.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.Start(System.Object)">
            <summary>
            Starts listener activity.
            </summary>
            <param name="enableFirewall">If true, firewall will be enabled, otherwise not.</param>
        </member>
        <member name="M:L2.Net.Network.Listener.DoBeginAccept">
            <summary>
            Start accepting next connection.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.DoAcceptSocket(System.IAsyncResult)">
            <summary>
            Accepts new connection.
            </summary>
            <param name="ar">Begin accept async result.</param>
        </member>
        <member name="M:L2.Net.Network.Listener.Stop">
            <summary>
            Stops listener activity and raises <see cref="E:L2.Net.Network.Listener.OnStopped"/> event.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.Stop(System.Boolean)">
            <summary>
            Stops listener activity.
            </summary>
            <param name="raiseOnStopEvent">If true, <see cref="E:L2.Net.Network.Listener.OnStopped"/> event will be raised, otherwise will not.</param>
        </member>
        <member name="M:L2.Net.Network.Listener.Terminate">
            <summary>
            Terminates listener.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.RaiseError(L2.Net.Network.ListenerErrorEventArgs)">
            <summary>
            Handles occurred error. For more information, see <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/>.
            </summary>
            <param name="e">For more information, see <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/>.</param>
        </member>
        <member name="P:L2.Net.Network.Listener.Active">
            <summary>
            Indicates, if listener is active now.
            </summary>
        </member>
        <member name="P:L2.Net.Network.Listener.Status">
            <summary>
            Gets string representation of listener status.
            </summary>
        </member>
        <member name="M:L2.Net.Network.Listener.IncrementAcceptedConnectionsCount(System.Int64@)">
            <summary>
            Safely increments accepted connections count.
            </summary>
            <param name="acceptedConnections">Current accepted connections count.</param>
        </member>
        <member name="T:L2.Net.Network.ListenerErrorEventArgs">
            <summary>
            Represents listener service error event arguments class.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ListenerErrorEventArgs.Exception">
            <summary>
            Thrown exception.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ListenerErrorEventArgs.Message">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ListenerErrorEventArgs.NextAction">
            <summary>
            <see cref="T:L2.Net.Network.OnErrorAction"/> step to do after raising current error.
            </summary>
        </member>
        <member name="M:L2.Net.Network.ListenerErrorEventArgs.#ctor(System.String,System.Exception,L2.Net.Network.OnErrorAction)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="e">Thrown exception.</param>
            <param name="nextAction">Action, that will be done after raising current error.</param>
        </member>
        <member name="M:L2.Net.Network.ListenerErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/> class. Next action : Throw.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:L2.Net.Network.ListenerErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/> class. Next action: Throw.
            </summary>
            <param name="e">Thrown exception.</param>
        </member>
        <member name="M:L2.Net.Network.ListenerErrorEventArgs.#ctor(System.String,L2.Net.Network.OnErrorAction)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/> class.
            </summary>
            <param name="message">Error message.</param>
            <param name="nextAction">Action, that will be done after raising current error.</param>
        </member>
        <member name="M:L2.Net.Network.ListenerErrorEventArgs.#ctor(System.Exception,L2.Net.Network.OnErrorAction)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ListenerErrorEventArgs"/> class.
            </summary>
            <param name="e">Thrown exception.</param>
            <param name="nextAction">Action, that will be done after raising current error.</param>
        </member>
        <member name="T:L2.Net.Network.OnConnectedEventHandler">
            <summary>
            Represents the method that will handle Client.OnConnected" event.
            </summary>
        </member>
        <member name="T:L2.Net.Network.OnDisconnectedEventHandler">
            <summary>
            Represents the method that will handle Client.OnDisconnected" event.
            </summary>
        </member>
        <member name="T:L2.Net.Network.NetworkClient">
            <summary>
            Abstract class to all client connections.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_Socket">
            <summary>
            Client <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_SendQueue">
            <summary>
            Send buffers queue.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_ReceiveBuffer">
            <summary>
            Connection receive buffer.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_ReceiveCallback">
            <summary>
            Receive callback.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_SendCallback">
            <summary>
            Send callback.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_HeaderReceived">
            <summary>
            Indicates if packet header was received.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_SendStackFlag">
            <summary>
            Packet sending indicator.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_SendReadyFlag">
            <summary>
            Indicates if sending packet is aviable.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_Lock">
            <summary>
            Lock object.
            </summary>
        </member>
        <member name="E:L2.Net.Network.NetworkClient.OnConnected">
            <summary>
            Occurs after <see cref="T:L2.Net.Network.NetworkClient"/> object was connected (initialized).
            </summary>
        </member>
        <member name="E:L2.Net.Network.NetworkClient.OnDisconnected">
            <summary>
            Occurs after <see cref="T:L2.Net.Network.NetworkClient"/> object was disconnected.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_DefaultBuffer">
            <summary>
            Default connection buffer.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.m_ReceivedLength">
            <summary>
            Currently received packet capacity.
            </summary>
        </member>
        <member name="F:L2.Net.Network.NetworkClient.ConnectionID">
            <summary>
            Connection id.
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.#ctor">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.NetworkClient"/> connection.
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.NetworkClient"/> connection.
            </summary>
            <param name="socket">Client <see cref="T:System.Net.Sockets.Socket"/> object.</param>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.BeginReceive">
            <summary>
            Forces <see cref="T:L2.Net.Network.NetworkClient"/> to begin receive from socket.
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.Handle(L2.Net.Packet)">
            <summary>
            Handles received <see cref="T:L2.Net.Packet"/>.
            </summary>
            <param name="packet">Received <see cref="T:L2.Net.Packet"/>.</param>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Receive <see cref="T:System.AsyncCallback"/> method.
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.SendCallback(System.IAsyncResult)">
            <summary>
            Send <see cref="T:System.AsyncCallback"/> method.
            </summary>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.ReceiveData(System.Byte[],System.Int32)">
            <summary>
            Serves for packet capacity validation and received buffer-><see cref="T:L2.Net.Packet"/> transforming.
            </summary>
            <param name="buffer">Received buffer.</param>
            <param name="length">Received buffer capacity.</param>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.SendData(System.Byte[])">
            <summary>
            Sends buffer to client socket.
            </summary>
            <param name="buffer">Buffer to send.</param>
        </member>
        <member name="M:L2.Net.Network.NetworkClient.CloseConnection">
            <summary>
            Closes current client connection.
            </summary>
        </member>
        <member name="P:L2.Net.Network.NetworkClient.Connected">
            <summary>
            Indicates if client socket is connected.
            </summary>
        </member>
        <member name="T:L2.Net.Network.RemoteServiceSettings">
            <summary>
            Base class for remote service settings.
            </summary>
        </member>
        <member name="F:L2.Net.Network.RemoteServiceSettings.ServiceUniqueID">
            <summary>
            Remote service unique id.
            </summary>
        </member>
        <member name="M:L2.Net.Network.RemoteServiceSettings.Write(L2.Net.Packet@)">
            <summary>
            Writes service settings to provided <see cref="T:L2.Net.Packet"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to write settings in.</param>
        </member>
        <member name="M:L2.Net.Network.RemoteServiceSettings.Read(L2.Net.Packet)">
            <summary>
            Reads remote service settings from provided <see cref="T:L2.Net.Packet"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to read settings from.</param>
        </member>
        <member name="T:L2.Net.Network.LoginServiceSettings">
            <summary>
            Remote login service settings.
            </summary>
        </member>
        <member name="F:L2.Net.Network.LoginServiceSettings.AutoCreateUser">
            <summary>
            Indicates if cache service can create non-existent user accounts automatically.
            </summary>
        </member>
        <member name="F:L2.Net.Network.LoginServiceSettings.DefaultAccessLevel">
            <summary>
            Access level, given to newer created users by default.
            </summary>
        </member>
        <member name="M:L2.Net.Network.LoginServiceSettings.#ctor(System.Byte,System.Boolean,System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.LoginServiceSettings"/> class.
            </summary>
            <param name="serviceID">Service unique id.</param>
            <param name="autoCreateAccounts">True, if cache server may create users automatically.</param>
            <param name="defaultAccessLevel">Default access level for newer created user.</param>
        </member>
        <member name="M:L2.Net.Network.LoginServiceSettings.Write(L2.Net.Packet@)">
            <summary>
            Writes login service settings to provided <see cref="T:L2.Net.Packet"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to write settings in.</param>
        </member>
        <member name="M:L2.Net.Network.LoginServiceSettings.Read(L2.Net.Packet)">
            <summary>
            Reads login service settings from <see cref="T:L2.Net.Packet"/>.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to read settings from.</param>
        </member>
        <member name="T:L2.Net.Network.ServiceShutdownType">
            <summary>
            Service shutdown types.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ServiceShutdownType.Usual">
            <summary>
            Regular shutdown (normal, without errors).
            </summary>
        </member>
        <member name="F:L2.Net.Network.ServiceShutdownType.OnCriticalError">
            <summary>
            Shutdown on some exception inside service code, service may not operate any more.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ServiceShutdownType.OnAppDomainException">
            <summary>
            Application domain exception occurred, program must be terminated.
            </summary>
        </member>
        <member name="T:L2.Net.Network.ServiceShutdownEventArgs">
            <summary>
            Service shutdown event arguments.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ServiceShutdownEventArgs.Message">
            <summary>
            Shutdown message.
            </summary>
        </member>
        <member name="F:L2.Net.Network.ServiceShutdownEventArgs.LastException">
            <summary>
            Last occurred exception.
            </summary>
        </member>
        <member name="M:L2.Net.Network.ServiceShutdownEventArgs.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ServiceShutdownEventArgs"/> object.
            </summary>
            <param name="message">Shutdown message.</param>
        </member>
        <member name="M:L2.Net.Network.ServiceShutdownEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Network.ServiceShutdownEventArgs"/> object.
            </summary>
            <param name="message">Shutdown message.</param>
            <param name="e">Occurred <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="T:L2.Net.Packet">
            <summary>
            Represents client packet structure.
            </summary>
        </member>
        <member name="F:L2.Net.Packet.m_DefaultOverflowValue">
            <summary>
            Default <see cref="T:L2.Net.Packet"/> overflow value.
            </summary>
        </member>
        <member name="F:L2.Net.Packet.m_Buffer">
            <summary>
            <see cref="T:L2.Net.Packet"/> buffer.
            </summary>
        </member>
        <member name="F:L2.Net.Packet.m_Offset">
            <summary>
            <see cref="T:L2.Net.Packet"/> reader / writer offset.
            </summary>
        </member>
        <member name="F:L2.Net.Packet.m_ReceivedPacket">
            <summary>
            Indicates if <see cref="T:L2.Net.Packet"/> was received or created to be sent.
            </summary>
        </member>
        <member name="M:L2.Net.Packet.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Packet"/> (received packet).
            </summary>
            <param name="headerOffset"><see cref="T:L2.Net.Packet"/> header offset (for opcodes).</param>
            <param name="buffer"><see cref="T:L2.Net.Packet"/> buffer.</param>
        </member>
        <member name="M:L2.Net.Packet.#ctor(System.Byte[])">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Packet"/> (packet to send).
            </summary>
            <param name="opcodes">Packet opcodes.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteByte(System.Byte)">
            <summary>
            Writes <see cref="T:System.Byte"/> value into packet buffer.
            </summary>
            <param name="v"><see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteByte(System.Byte[])">
            <summary>
            Writes array of <see cref="T:System.Byte"/> values into packet buffer.
            </summary>
            <param name="v">Array of <see cref="T:System.Byte"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteBytesArray(System.Byte[])">
            <summary>
            Writes array of <see cref="T:System.Byte"/> into packet buffer.
            </summary>
            <param name="v">Array of <see cref="T:System.Byte"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteShort(System.Int16)">
            <summary>
            Writes <see cref="T:System.Int16"/> value into packet buffer.
            </summary>
            <param name="v"><see cref="T:System.Int16"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteShort(System.Int16[])">
            <summary>
            Writes array of <see cref="T:System.Int16"/> values into packet buffer.
            </summary>
            <param name="v">Array of <see cref="T:System.Int16"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteInt(System.Int32)">
            <summary>
            Writes <see cref="T:System.Int32"/> value to packet buffer.
            </summary>
            <param name="v"><see cref="T:System.Int32"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteInt(System.Int32[])">
            <summary>
            Writes array of <see cref="T:System.Int32"/> values into packet buffer.
            </summary>
            <param name="v">Array of <see cref="T:System.Int32"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteDouble(System.Double)">
            <summary>
            Writes <see cref="T:System.Double"/> value into packet buffer.
            </summary>
            <param name="v"><see cref="T:System.Double"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteDouble(System.Double[])">
            <summary>
            Writes array of <see cref="T:System.Double"/> values into packet buffer.
            </summary>
            <param name="v">Array of <see cref="T:System.Double"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteLong(System.Int64)">
            <summary>
            Writes <see cref="T:System.Int64"/> value into packet buffer.
            </summary>
            <param name="v"><see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteLong(System.Int64[])">
            <summary>
            Writes array of <see cref="T:System.Int64"/> values into packet buffer.
            </summary>
            <param name="v">Array of <see cref="T:System.Int64"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteString(System.String)">
            <summary>
            Writes <see cref="T:System.String"/> object into packet buffer.
            </summary>
            <param name="s"><see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.WriteString(System.String[])">
            <summary>
            Writes array of <see cref="T:System.String"/> values to packet buffer.
            </summary>
            <param name="s">Array of <see cref="T:System.String"/> values.</param>
        </member>
        <member name="M:L2.Net.Packet.InternalWriteBool(System.Boolean)">
            <summary>
            Writes <see cref="T:System.Boolean"/> value to packet buffer. (Inner network only)
            </summary>
            <param name="v"><see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.InternalWriteDateTime(System.DateTime)">
            <summary>
            Writes <see cref="T:System.DateTime"/> value to packet buffer. (Inner network only)
            </summary>
            <param name="v"><see cref="T:System.DateTime"/> value.</param>
        </member>
        <member name="M:L2.Net.Packet.ReadByte">
            <summary>
            Reads <see cref="T:System.Byte"/> value from packet buffer.
            </summary>
            <returns><see cref="T:System.Byte"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadBytesArray(System.Int32)">
            <summary>
            Reads array of <see cref="T:System.Byte"/> values from packet buffer.
            </summary>
            <param name="length">Length of array to read.</param>
            <returns>Array of <see cref="T:System.Byte"/> values.</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadShort">
            <summary>
            Reads <see cref="T:System.Int16"/> value from packet buffer.
            </summary>
            <returns><see cref="T:System.Int16"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadInt">
            <summary>
            Reads <see cref="T:System.Int32"/> value from packet buffer.
            </summary>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadDouble">
            <summary>
            Reads <see cref="T:System.Double"/> value from packet buffer.
            </summary>
            <returns><see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadLong">
            <summary>
            Reads <see cref="T:System.Int64"/> value from packet buffer.
            </summary>
            <returns><see cref="T:System.Int64"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadString">
            <summary>
            Reads <see cref="T:System.String"/> value from packet buffer.
            </summary>
            <returns><see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.InternalReadBool">
            <summary>
            Reads <see cref="T:System.Boolean"/> value from packet buffer. (Inner network only)
            </summary>
            <returns><see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.InternalReadDateTime">
            <summary>
            Reads <see cref="T:System.DateTime"/> value from packet buffer. (Inner network only)
            </summary>
            <returns><see cref="T:System.DateTime"/> value.</returns>
        </member>
        <member name="M:L2.Net.Packet.ValidateBufferSize(System.Int32)">
            <summary>
            Validates buffer capacity before writing into it.
            </summary>
            <param name="nextValueLength">Length of next bytes sequence to write into buffer.</param>
        </member>
        <member name="M:L2.Net.Packet.Prepare(System.Int32)">
            <summary>
            Resizes <see cref="T:L2.Net.Packet"/> buffer to it's actual capacity and appends buffer length to the beginning of <see cref="T:L2.Net.Packet"/> buffer.
            </summary>
            <param name="headerSize"><see cref="T:L2.Net.Packet"/> header (opcodes) capacity.</param>
        </member>
        <member name="M:L2.Net.Packet.GetBuffer">
            <summary>
            Returns packet buffer.
            </summary>
            <returns>Packet buffer.</returns>
        </member>
        <member name="M:L2.Net.Packet.GetBuffer(System.Int32)">
            <summary>
            Returns packet buffer.
            </summary>
            <param name="skipFirstBytesCount">Amount of first bytes to skip.</param>
            <returns>Buffer without provided amount of first bytes.</returns>
        </member>
        <member name="M:L2.Net.Packet.MoveOffset(System.Int32)">
            <summary>
            Moves <see cref="T:L2.Net.Packet"/> offset position.
            </summary>
            <param name="size">Additional offset length.</param>
        </member>
        <member name="P:L2.Net.Packet.FirstOpcode">
            <summary>
            Gets first packet opcode.
            </summary>
        </member>
        <member name="P:L2.Net.Packet.SecondOpcode">
            <summary>
            Gets second packet opcode.
            </summary>
        </member>
        <member name="P:L2.Net.Packet.Length">
            <summary>
            Gets packet capacity.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:L2.Net.Packet.RunImpl" -->
        <member name="M:L2.Net.Packet.GetPacketName">
            <summary>
            Para poner el nombre del paquete..
            </summary>
            <returns>The name of Packet Name</returns>
        </member>
        <member name="M:L2.Net.Packet.ReadImpl">
            <summary>
            Read 
            </summary>
        </member>
        <member name="M:L2.Net.Packet.ToString">
            <summary>
            Returns string representation of current packet.
            </summary>
            <returns>String representation of current packet.</returns>
        </member>
        <member name="T:L2.Net.OPPacket">
            <summary>
            Default packer
            </summary>
        </member>
        <member name="M:L2.Net.OPPacket.#ctor(System.Byte[])">
            <summary>
            Fundamentally packet.
            </summary>
            <param name="opcode"></param>
        </member>
        <member name="M:L2.Net.OPPacket.#ctor(System.Int32,System.Byte[])">
            <summary>
            
            </summary>
            <param name="headerOffset"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:L2.Net.OPPacket.#ctor(System.Byte)">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:L2.Net.OPPacket.GetPacketName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:L2.Net.OPPacket.RunImpl">
            <summary>
            
            </summary>
        </member>
        <member name="T:L2.Net.ServiceType">
            <summary>
            Services types.
            </summary>
        </member>
        <member name="F:L2.Net.ServiceType.Undefined">
            <summary>
            Undefined service type.
            </summary>
        </member>
        <member name="F:L2.Net.ServiceType.LoginService">
            <summary>
            Login service type.
            </summary>
        </member>
        <member name="F:L2.Net.ServiceType.CacheService">
            <summary>
            Cache service type.
            </summary>
        </member>
        <member name="F:L2.Net.ServiceType.GameService">
            <summary>
            Game service type.
            </summary>
        </member>
        <member name="F:L2.Net.ServiceType.NpcService">
            <summary>
            Npc service type.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.NetLayer">
            <summary>
            Network layers.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.NetLayer.Service">
            <summary>
            Services communication layer.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.NetLayer.UserData">
            <summary>
            User data layer.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.ServiceLayer">
            <summary>
            Class, that contains service layer opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.ServiceLayer.Identity">
            <summary>
            Layer identifier.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.ServiceLayer.InitializeRequest">
            <summary>
            <see cref="T:L2.Net.Structs.Services.InitializeRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.ServiceLayer.InitializeResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.InitializeResponse"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.ServiceLayer.SetSettingsRequest">
            <summary>
            <see cref="T:L2.Net.Structs.Services.SetSettingsRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.ServiceLayer.SetSettingsResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.SetSettingsResponse"/> packet opcode.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.UserDataLayer">
            <summary>
            Class, that contains user data layer opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.Identity">
            <summary>
            Layer identifier.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.AuthenticateUser">
            <summary>
            <see cref="T:L2.Net.Structs.Services.UserAuthenticationRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.UserAuthenticationResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.UserAuthenticationResponse"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.CacheUserSessionRequest">
            <summary>
            <see cref="T:L2.Net.Structs.Services.CacheUserSessionRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.CacheUserSessionResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.CacheUserSessionResponse"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.UnCacheUser">
            <summary>
            <see cref="T:L2.Net.Structs.Services.UnCacheUser"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.WorldsListRequest">
            <summary>
            <see cref="T:L2.Net.Structs.Services.WorldsListRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.WorldsListResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.WorldsListResponse"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.JoinWorldRequest">
            <summary>
            <see cref="T:L2.Net.Structs.Services.JoinWorldRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserDataLayer.JoinWorldResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.JoinWorldResponse"/> packet opcode.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.WorldDataLayer">
            <summary>
            Class, that contains world-cache packet opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldDataLayer.Identity">
            <summary>
            Layer identifier.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldDataLayer.SetWorldActiveRequest">
            <summary>
            <see cref="T:L2.Net.Structs.Services.SetWorldActiveRequest"/> packet opcode.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldDataLayer.SetWorldActiveResponse">
            <summary>
            <see cref="T:L2.Net.Structs.Services.SetWorldActiveResponse"/> packet opcode.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.NpcDataLayer">
            <summary>
            Class, that contains npc data layer opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.NpcDataLayer.Identity">
            <summary>
            Layer identifier.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.InitializeRequest">
            <summary>
            Services communication initialization request.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeRequest.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeRequest.ServiceId">
            <summary>
            Requester service unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeRequest.ServiceType">
            <summary>
            Requester <see cref="F:L2.Net.Structs.Services.InitializeRequest.ServiceType"/>.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.InitializeRequest.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.InitializeRequest"/> struct.
            </summary>
            <param name="serviceId">Requester service unique id.</param>
            <param name="type">Requester <see cref="F:L2.Net.Structs.Services.InitializeRequest.ServiceType"/>.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.InitializeRequest.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.InitializeRequest"/> struct.
            </summary>
            <param name="data"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.InitializeRequest.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.InitializeResponse">
            <summary>
            Services communication initialization response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeResponse.Rejected">
            <summary>
            Initialization rejection flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeResponse.Accepted">
            <summary>
            Initialization acceptance flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeResponse.Opcodes">
            <summary>
            Packet representation opcodes
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeResponse.RemoteServiceID">
            <summary>
            Remote service unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeResponse.RemoteServiceType">
            <summary>
            Remote service <see cref="T:L2.Net.ServiceType"/>.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.InitializeResponse.Answer">
            <summary>
            1 if remote service accepted current connections, otherwise 0.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.InitializeResponse.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.InitializeResponse"/> struct.
            </summary>
            <param name="answeringServiceID">Answering service unique id.</param>
            <param name="answeringServiceType">Answering <see cref="T:L2.Net.ServiceType"/>.</param>
            <param name="answer">"Answer" : 0 - rejected, 1 - accepted.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.InitializeResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.InitializeResponse"/> struct.
            </summary>
            <param name="data"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.InitializeResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.SetSettingsRequest">
            <summary>
            Set remote service settings request.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetSettingsRequest.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.SetSettingsRequest.ToPacket(L2.Net.Network.RemoteServiceSettings)">
            <summary>
            Creates <see cref="T:L2.Net.Packet"/> that contains provided <see cref="T:L2.Net.Network.RemoteServiceSettings"/> data.
            </summary>
            <param name="settings"><see cref="T:L2.Net.Network.RemoteServiceSettings"/> to create <see cref="T:L2.Net.Packet"/> from.</param>
            <returns><see cref="T:L2.Net.Packet"/> that contains provided <see cref="T:L2.Net.Network.RemoteServiceSettings"/> data.</returns>
        </member>
        <member name="M:L2.Net.Structs.Services.SetSettingsRequest.FromPacket(L2.Net.Packet,L2.Net.ServiceType)">
            <summary>
            Reads <see cref="T:L2.Net.Network.RemoteServiceSettings"/> from provided <see cref="T:L2.Net.Packet"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to read <see cref="T:L2.Net.Network.RemoteServiceSettings"/> from.</param>
            <param name="t">Remote <see cref="T:L2.Net.ServiceType"/>.</param>
            <returns>><see cref="T:L2.Net.Network.RemoteServiceSettings"/> readed from provided <see cref="T:L2.Net.Packet"/>.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.SetSettingsResponse">
            <summary>
            Set remote service settings response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetSettingsResponse.Rejected">
            <summary>
            Remote service settings accepted indicator.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetSettingsResponse.Accepted">
            <summary>
            Remote service settings rejected indicator. 
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetSettingsResponse.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetSettingsResponse.Response">
            <summary>
            Settings acceptance response.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.SetSettingsResponse.#ctor(System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.SetSettingsResponse"/> struct.
            </summary>
            <param name="response">Settings acceptance response.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.SetSettingsResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.SetSettingsResponse"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.SetSettingsResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.CacheUserSessionRequest">
            <summary>
            Cache user session data request.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionRequest.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionRequest.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.CacheUserSessionRequest"/> unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionRequest.Session">
            <summary>
            User session object.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.CacheUserSessionRequest.#ctor(System.Int64,L2.Net.UserSession)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.CacheUserSessionRequest"/> struct.
            </summary>
            <param name="requestID"><see cref="T:L2.Net.Structs.Services.CacheUserSessionRequest"/> unique id.</param>
            <param name="session"><see cref="T:L2.Net.UserSession"/> object to cache.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.CacheUserSessionRequest.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.CacheUserSessionRequest"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.CacheUserSessionRequest.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.CacheUserSessionResponse">
            <summary>
            Cache user session data response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionResponse.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionResponse.Failed">
            <summary>
            Session registration failed.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionResponse.Accepted">
            <summary>
            Session successfully registered.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionResponse.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.CacheUserSessionResponse"/> unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.CacheUserSessionResponse.Response">
            <summary>
            Cache service response.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.CacheUserSessionResponse.#ctor(System.Int64,System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.CacheUserSessionResponse"/> struct.
            </summary>
            <param name="requestID"><see cref="T:L2.Net.Structs.Services.CacheUserSessionResponse"/> unique id.</param>
            <param name="response">Cache service response.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.CacheUserSessionResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of  <see cref="T:L2.Net.Structs.Services.CacheUserSessionResponse"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.CacheUserSessionResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.JoinWorldRequest">
            <summary>
            Request join world packet.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequest.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequest.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.JoinWorldRequest"/> request unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequest.SessionID">
            <summary>
            <see cref="T:L2.Net.UserSession"/> unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequest.WorldID">
            <summary>
            World id, user selected to join. 
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.JoinWorldRequest.#ctor(System.Int64,System.Int32,System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.JoinWorldRequest"/> struct.
            </summary>
            <param name="requestID"><see cref="T:L2.Net.Structs.Services.JoinWorldRequest"/> request unique id.</param>
            <param name="sessionID">User session unique id.</param>
            <param name="worldID">Selected world id.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.JoinWorldRequest.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.JoinWorldRequest"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.JoinWorldRequest.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.JoinWorldRequestResult">
            <summary>
            Join world failure reasons.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequestResult.SystemError">
            <summary>
            System error occurred.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequestResult.UserOrPasswordWrong">
            <summary>
            User login or password is wrong ?..
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequestResult.PasswordIsIncorrect">
            <summary>
            Password is incorrect ?..
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequestResult.AccessFailed">
            <summary>
            Access failed.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequestResult.TooManyPlayers">
            <summary>
            Too many connected users.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldRequestResult.Accepted">
            <summary>
            Join world request accepted.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.JoinWorldResponse">
            <summary>
            Join world response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldResponse.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldResponse.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.JoinWorldResponse"/> request unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.JoinWorldResponse.Result">
            <summary>
            Request result.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.JoinWorldResponse.#ctor(System.Int64,L2.Net.Structs.Services.JoinWorldRequestResult)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.JoinWorldResponse"/> struct.
            </summary>
            <param name="requestID"><see cref="T:L2.Net.Structs.Services.JoinWorldResponse"/> unique id.</param>
            <param name="result">Request result.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.JoinWorldResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.JoinWorldResponse"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.JoinWorldResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.UnCacheUser">
            <summary>
            Request to cache server to un-cache all cached user data.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UnCacheUser.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UnCacheUser.SessionID">
            <summary>
            User session unique id.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.UnCacheUser.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UnCacheUser"/> struct.
            </summary>
            <param name="sessionID">Session unique id.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UnCacheUser.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UnCacheUser"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UnCacheUser.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.UserAuthenticationRequest">
            <summary>
            User authentication request.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationRequest.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationRequest.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.UserAuthenticationRequest"/> request unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationRequest.Login">
            <summary>
            User login.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationRequest.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationRequest.SessionID">
            <summary>
            <see cref="T:L2.Net.UserSession"/> unique id.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationRequest.#ctor(System.Int64,System.String,System.String,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UserAuthenticationRequest"/> struct.
            </summary>
            <param name="requestID"><see cref="T:L2.Net.Structs.Services.UserAuthenticationRequest"/> request unique id.</param>
            <param name="login">User login.</param>
            <param name="password">User password.</param>
            <param name="sessionID">User session unique id.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationRequest.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UserAuthenticationRequest"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationRequest.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.UserAuthenticationResponseType">
            <summary>
            User authentication response types.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.SystemError">
            <summary>
            System error flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.PasswordWrong">
            <summary>
            Password wrong flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.UserOrPasswordWrong">
            <summary>
            User or password wrong flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.AccessFailed">
            <summary>
            Access failed flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.AccountInUse">
            <summary>
            Account in use flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.ServerOverloaded">
            <summary>
            Server is overloaded flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.ServerMaintenance">
            <summary>
            Server is under maintenance flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.TemporaryPasswordExpired">
            <summary>
            Temporary password expired flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.DualBox">
            <summary>
            Dual boxing flag.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponseType.UserAccepted">
            <summary>
            Inner - user accepted flag.
            </summary>
        </member>
        <member name="T:L2.Net.Structs.Services.UserAuthenticationResponse">
            <summary>
            User authentication response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponse.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponse.RequestID">
            <summary>
            Request unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponse.Response">
            <summary>
            Cache service response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponse.UserID">
            <summary>
            User unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponse.LastWorldID">
            <summary>
            Last world user was played on.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.UserAuthenticationResponse.AccessLevel">
            <summary>
            User's access level.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationResponse.#ctor(System.Int64,L2.Net.Structs.Services.UserAuthenticationResponseType)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UserAuthenticationResponse"/> struct.
            </summary>
            <param name="requestID">Request unique id.</param>
            <param name="response">Cache service response.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationResponse.#ctor(System.Int64,L2.Net.Structs.Services.UserAuthenticationResponseType,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UserAuthenticationResponse"/> struct.
            </summary>
            <param name="requestID">Request unique id.</param>
            <param name="response">Cache service response.</param>
            <param name="userID">User unique id.</param>
            <param name="lastWorldID">Last world id, player was played in.</param>
            <param name="accessLevel">User access level.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.UserAuthenticationResponse"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.UserAuthenticationResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.WorldsListRequest">
            <summary>
            Worlds list request.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldsListRequest.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldsListRequest.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.WorldsListRequest"/> unique id.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldsListRequest.#ctor(System.Int64)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.WorldsListRequest"/> struct.
            </summary>
            <param name="requestID"><see cref="T:L2.Net.Structs.Services.WorldsListRequest"/> unique id.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldsListRequest.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.WorldsListRequest"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldsListRequest.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.WorldsListResponse">
            <summary>
            Worlds list response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldsListResponse.Opcodes">
            <summary>
            Packet representation opcodes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldsListResponse.RequestID">
            <summary>
            <see cref="T:L2.Net.Structs.Services.WorldsListRequest"/> unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldsListResponse.Data">
            <summary>
            Connected worlds data.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldsListResponse.#ctor(System.Int64,L2.Net.Structs.Services.WorldSummary[])">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.WorldsListResponse"/> struct.
            </summary>
            <param name="requestID">Request unique id.</param>
            <param name="worlds">Connected worlds data.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldsListResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.WorldsListResponse"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldsListResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.SetWorldActiveRequest">
            <summary>
            Notification from game server that it's ready to accept player connections.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetWorldActiveRequest.Opcodes">
            <summary>
            Packet representation opcodes. 
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.SetWorldActiveRequest.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.SetWorldActiveResponse">
            <summary>
            Set world as active response.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.SetWorldActiveResponse.Opcodes">
            <summary>
            Packet representation opcodes. 
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.SetWorldActiveResponse.#ctor(L2.Net.Packet)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.SetWorldActiveResponse"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to initialize from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.SetWorldActiveResponse.ToPacket">
            <summary>
            Converts current struct to it's <see cref="T:L2.Net.Packet"/> equivalent.
            </summary>
            <returns><see cref="T:L2.Net.Packet"/> equivalent of current struct.</returns>
        </member>
        <member name="T:L2.Net.Structs.Services.WorldSummary">
            <summary>
            Represents world summary struct. 
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.ID">
            <summary>
            World unique id.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.Address">
            <summary>
            World ip-address in bytes.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.Port">
            <summary>
            Port, that world use.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.AgeLimit">
            <summary>
            Age limit.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.IsPvP">
            <summary>
            Indicates if world is PvP server.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.UsersMax">
            <summary>
            Maximum of connected users count.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.UsersOnline">
            <summary>
            Currently connected users count.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.ShowBrackets">
            <summary>
            Indicates if is needed to show brackets next to world name.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.IsTestServer">
            <summary>
            Indicates if world is test server.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.ShowClock">
            <summary>
            Indicates if is needed to show clock next to world name.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.IsOnline">
            <summary>
            Indicates if world is online now.
            </summary>
        </member>
        <member name="F:L2.Net.Structs.Services.WorldSummary.AccessLevel">
            <summary>
            Minimum access level, needed to connect to current world.
            </summary>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldSummary.#ctor(System.Byte,System.Byte[],System.Int32,System.Byte,System.Boolean,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte)">
             <summary>
             Initializes new instance of <see cref="T:L2.Net.Structs.Services.WorldSummary"/> struct.
             </summary>
             <param name="id">World id.</param>
             <param name="address">Ip-address as <see cref="T:System.Byte"/> array.</param>
             <param name="port">Port.</param>
             <param name="ageLimit">Age limit.</param>
             <param name="isPvP">True, if world is PvP server.</param>
             <param name="usersMax">Max connected users count.</param>
             <param name="usersOnline">Currently connected users count.</param>
             <param name="showBrackets">If true, show brackets before world name.</param>
             <param name="isTestServer">True, if world is test server.</param>
             <param name="showClock">If true, show clock near world name.</param>
            <param name="isOnline">True, if world is online, otherwise false.</param>
             <param name="accessLevel">Minimum access level, required to connect to current world.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldSummary.#ctor(L2.Net.Packet@)">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Structs.Services.WorldSummary"/> struct.
            </summary>
            <param name="p"><see cref="T:L2.Net.Packet"/> to read self data from.</param>
        </member>
        <member name="M:L2.Net.Structs.Services.WorldSummary.Write(L2.Net.Structs.Services.WorldSummary,L2.Net.Packet@)">
            <summary>
            Appends world data to referenced <see cref="T:L2.Net.Packet"/> struct.
            </summary>
            <param name="ws"><see cref="T:L2.Net.Structs.Services.WorldSummary"/> to write.</param>
            <param name="p">Referenced <see cref="T:L2.Net.Packet"/> struct.</param>
        </member>
        <member name="T:L2.Net.UserSession">
            <summary>
            Represents <see cref="T:L2.Net.UserSession"/> structure.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.Null">
            <summary>
            Null <see cref="T:L2.Net.UserSession"/> object.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.ID">
            <summary>
            User <see cref="T:L2.Net.UserSession"/> unique id.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.IPAddress">
            <summary>
            User ip-address.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.Play1">
            <summary>
            Play 1 key.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.Play2">
            <summary>
            Play 2 key.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.Login1">
            <summary>
            Login 1 key.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.Login2">
            <summary>
            Login 2 key.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.AccountName">
            <summary>
            User account name.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.AccountID">
            <summary>
            User account unique id.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.BlowfishKey">
            <summary>
            <see cref="T:L2.Net.UserSession"/> blowfish key.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.StartTime">
            <summary>
            <see cref="T:L2.Net.UserSession"/> creation time.
            </summary>
        </member>
        <member name="F:L2.Net.UserSession.LastWorld">
            <summary>
            World, in which user is playing now.
            </summary>
        </member>
        <member name="M:L2.Net.UserSession.ToString">
            <summary>
            Returns string representation of <see cref="T:L2.Net.UserSession"/> structure.
            </summary>
            <returns>String representation of <see cref="T:L2.Net.UserSession"/> structure.</returns>
        </member>
        <member name="M:L2.Net.UserSession.op_Equality(L2.Net.UserSession,L2.Net.UserSession)">
            <summary>
            Determines two sessions equality.
            </summary>
            <param name="one">One <see cref="T:L2.Net.UserSession"/> object.</param>
            <param name="other">Other <see cref="T:L2.Net.UserSession"/> object.</param>
            <returns>True, if compared <see cref="T:L2.Net.UserSession"/>s are equal, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.UserSession.op_Inequality(L2.Net.UserSession,L2.Net.UserSession)">
            <summary>
            Determines two sessions inequality.
            </summary>
            <param name="one">One <see cref="T:L2.Net.UserSession"/> object.</param>
            <param name="other">Other <see cref="T:L2.Net.UserSession"/> object.</param>
            <returns>True, if compared <see cref="T:L2.Net.UserSession"/>s are not equal, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.UserSession.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified <see cref="T:L2.Net.UserSession"/>.
            </summary>
            <param name="obj"> An object to compare with this instance.</param>
            <returns>True if obj is an instance of <see cref="T:L2.Net.UserSession"/> and equals the value of this instance, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.UserSession.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:L2.Net.ICompilable">
            <summary>
            Interface, that must have externally scripted object.
            </summary>
        </member>
        <member name="M:L2.Net.ICompilable.Initialize">
            <summary>
            Object initialization method.
            </summary>
        </member>
        <member name="T:L2.Net.ScriptFileType">
            <summary>
            Script files types.
            </summary>
        </member>
        <member name="F:L2.Net.ScriptFileType.CS">
            <summary>
            CSharp file type.
            </summary>
        </member>
        <member name="F:L2.Net.ScriptFileType.VB">
            <summary>
            Visual Basic file type.
            </summary>
        </member>
        <member name="T:L2.Net.SmartCompiler">
            <summary>
            Externally coded scripts compiler.
            </summary>
        </member>
        <member name="F:L2.Net.SmartCompiler.m_TypesCache">
            <summary>
            Compiled objects types cache.
            </summary>
        </member>
        <member name="M:L2.Net.SmartCompiler.Initialize(System.String,System.String)">
            <summary>
            Initializes <see cref="T:L2.Net.SmartCompiler"/> class.
            </summary>
            <param name="scriptsDirectory">Base directory, that contains externally coded scripts.</param>
            <param name="referenceAssembliesConfig">Path to the file, that contains list of reference assemblies, needed to compile external scripts.</param>
        </member>
        <member name="M:L2.Net.SmartCompiler.EnsureOutputDirectory">
            <summary>
            Verifies that output directory is empty.
            </summary>
        </member>
        <member name="M:L2.Net.SmartCompiler.Compile(System.String,L2.Net.ScriptFileType,System.Boolean,System.EventHandler)">
            <summary>
            Compiles external scripts.
            </summary>
            <param name="directory">Directory to search scripts in.</param>
            <param name="type">Type of files to search.</param>
            <param name="recursive">False, if compiler has to search files in top directory only, otherwise true.</param>
            <param name="completeDelegate"></param>
        </member>
        <member name="M:L2.Net.SmartCompiler.CacheType(System.Type,System.Object)">
            <summary>
            Adds object to types cache.
            </summary>
            <param name="t">Object <see cref="T:System.Type"/>.</param>
            <param name="o"><see cref="T:System.Object"/> to add.</param>
        </member>
        <member name="M:L2.Net.SmartCompiler.FindTypeByBase``1">
            <summary>
            Searches for all objects, which parent class <see cref="T:System.Type"/> is <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Parent class <see cref="T:System.Type"/>.</typeparam>
            <returns>Collection of objects, derived from <see cref="T:System.Type"/> <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:L2.Net.SmartCompiler.FindType``1">
            <summary>
            Searches for all objects, with <see cref="T:System.Type"/> is <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of objects to look for.</typeparam>
            <returns>Collection of objects of <see cref="T:System.Type"/> <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:L2.Net.SmartCompiler.Convert``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts provided objects collection to <see cref="T:System.Type"/> <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Result collection objects <see cref="T:System.Type"/>.</typeparam>
            <param name="objects">Objects collection.</param>
            <returns>Collection of <see cref="T:System.Type"/> <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:L2.Net.SmartCompiler.Compile(System.String,L2.Net.ScriptFileType,System.Boolean,System.Reflection.Assembly@)">
            <summary>
            Compiles external scripts.
            </summary>
            <param name="directory">Directory to search scripts in.</param>
            <param name="type">Type of files to search.</param>
            <param name="recursive">False, if compiler has to search files in top directory only, otherwise true.</param>
            <param name="assembly">Output assembly.</param>
            <returns>True, if external scripts compiled witout errors, otherwise false.</returns>
            <exception cref="T:System.NotImplementedException" />
        </member>
        <member name="M:L2.Net.SmartCompiler.ShowResults(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            Displays / logs compilation results.
            </summary>
            <param name="results">Compiler results object.</param>
        </member>
        <member name="M:L2.Net.SmartCompiler.GetReferenceAssemblies">
            <summary>
            Returns array of reference assemblies.
            </summary>
            <returns>Array of reference assemblies.</returns>
            <exception cref="T:System.IO.FileNotFoundException" />
        </member>
        <member name="M:L2.Net.SmartCompiler.GetScripts(System.String,L2.Net.ScriptFileType,System.Boolean)">
            <summary>
            Retrieves array of scripts file names, found in provided directory.
            </summary>
            <param name="directory">Directory to search scripts in.</param>
            <param name="type">Type of files to search.</param>
            <param name="recursive">False, if compiler has to search files in top directory only, otherwise true.</param>
            <returns>Array of scripts file names, found in provided directory.</returns>
        </member>
        <member name="T:L2.Net.L2Buffer">
            <summary>
            Provides some methods for buffers manipulation.
            </summary>
        </member>
        <member name="M:L2.Net.L2Buffer.Copy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies array of <see cref="T:System.Byte"/> values from source to destination buffer.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="srcOffset">Source buffer offset.</param>
            <param name="destination">Destination buffer.</param>
            <param name="destOffset">Destination buffer offset.</param>
            <param name="size">Count of bytes to copy.</param>
            <returns>Destination buffer.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.Copy(System.Byte*,System.Int32,System.Byte*,System.Int32,System.Int32)">
            <summary>
            Copies array of <see cref="T:System.Byte"/> values from source to destination buffer.
            </summary>
            <param name="src">Source buffer reference.</param>
            <param name="srcOffset">Source buffer offset.</param>
            <param name="dst">Destination buffer reference.</param>
            <param name="dstOffset">Destination buffer offset.</param>
            <param name="size">Amount of bytes to copy from source to destination buffer.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.Copy(System.Byte*,System.Int32,System.Byte*,System.Int32@)">
            <summary>
            Copies array of <see cref="T:System.Byte"/> values to destination buffer.
            </summary>
            <param name="w">Reference to <see cref="T:System.Byte"/> values array.</param>
            <param name="size">Amount of bytes to write into destination buffer.</param>
            <param name="dst">Destination <see cref="T:System.Byte"/>s buffer reference.</param>
            <param name="offset">Destination buffer offset.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.UnsafeCopy(System.Int16*,System.Int32,System.Byte*,System.Int32@)">
            <summary>
            Copies array of <see cref="T:System.Int16"/> values to destination buffer.
            </summary>
            <param name="w">Reference to <see cref="T:System.Int16"/> values array.</param>
            <param name="size">Amount of bytes to write into destination buffer.</param>
            <param name="dst">Destination <see cref="T:System.Byte"/>s buffer reference.</param>
            <param name="offset">Destination buffer offset.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.SpecialCopy(System.Int16*,System.Int32)">
            <summary>
            Returns new array of <see cref="T:System.Int16"/> values, copied from the beginning of provided <paramref name="src"/> pointer.
            </summary>
            <param name="src">Source <see cref="T:System.Int16"/> values array pointer.</param>
            <param name="length">Length of array to copy.</param>
            <returns>New array of <see cref="T:System.Int16"/> values, copied from the beginning of provided <paramref name="src"/> pointer.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.UnsafeCopy(System.Int32*,System.Int32,System.Byte*,System.Int32@)">
            <summary>
            Copies array of <see cref="T:System.Int32"/> values to destination buffer.
            </summary>
            <param name="w">Reference to <see cref="T:System.Int32"/> values array.</param>
            <param name="size">Amount of bytes to write into destination buffer.</param>
            <param name="dst">Destination <see cref="T:System.Byte"/>s buffer reference.</param>
            <param name="offset">Destination buffer offset.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.UnsafeCopy(System.Double*,System.Int32,System.Byte*,System.Int32@)">
            <summary>
            Copies array of <see cref="T:System.Double"/> values to destination buffer.
            </summary>
            <param name="w">Reference to <see cref="T:System.Double"/> values array.</param>
            <param name="size">Amount of bytes to write into destination buffer.</param>
            <param name="dst">Destination buffer reference.</param>
            <param name="offset">Destination buffer offset.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.UnsafeCopy(System.Int64*,System.Int32,System.Byte*,System.Int32@)">
            <summary>
            Copies array of <see cref="T:System.Int64"/> values to destination buffer.
            </summary>
            <param name="w">Reference to <see cref="T:System.Int64"/> values array.</param>
            <param name="size">Amount of bytes to write into destination buffer.</param>
            <param name="dst">Destination buffer reference.</param>
            <param name="offset">Destination buffer offset.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.UnsafeCopy(System.Char*,System.Int32,System.Byte*,System.Int32@)">
            <summary>
            Copies array of <see cref="T:System.Char"/> values to destination buffer.
            </summary>
            <param name="w">Reference to <see cref="T:System.Char"/> values array.</param>
            <param name="size">Amount of bytes to write into destination buffer.</param>
            <param name="dst">Destination buffer reference.</param>
            <param name="offset">Destination buffer offset.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.Cut(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Cuts some bytes from source buffer.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="startIndex">Source start size.</param>
            <param name="size">Count of bytes to cut.</param>
            <returns>Result buffer.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.Replace(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Replaces part of buffer with replacement buffer. 
            </summary>
            <param name="buffer">Destination buffer.</param>
            <param name="index">Destination replacement size.</param>
            <param name="replacement">Replacement buffer.</param>
            <param name="size">Replacement bytes count.</param>
            <returns>Destination buffer.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.Extend(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Extends buffer.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="sourceIndex">Source buffer start-copy size.</param>
            <param name="neededLength">Result buffer capacity.</param>
            <returns>Extended buffer.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.Extend(System.Byte[]@,System.Int32)">
            <summary>
            Extends buffer.
            </summary>
            <param name="source">Source buffer.</param>
            <param name="additionalLength">Additional capacity.</param>
            <returns>Extended buffer.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.ToString(System.Byte[])">
            <summary>
            Gives string representation of <see cref="T:System.Byte"/> values buffer.
            </summary>
            <param name="buffer"><see cref="T:System.Byte"/> values array.</param>
            <returns>String representation of <see cref="T:System.Byte"/> values array.</returns>
        </member>
        <member name="M:L2.Net.L2Buffer.GetTrimmedString(System.Byte*,System.Int32,System.String@,System.Int32)">
            <summary>
            Converts <see cref="T:System.Byte"/> values from one array to <see cref="T:System.Char"/> values array (<see cref="T:System.String"/>).
            </summary>
            <param name="src"><see cref="T:System.Byte"/> values array reference.</param>
            <param name="srcOffset"><see cref="T:System.Byte"/> values array offset.</param>
            <param name="dst">Destination string.</param>
            <param name="bytesCount">Amount of <see cref="T:System.Byte"/> values to convert to <see cref="T:System.Char"/> values.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.GetTrimmedString(System.Byte*,System.Int32@,System.Int32)">
            <summary>
            Converts <see cref="T:System.Byte"/> values array to <see cref="T:System.Char"/> values array (<see cref="T:System.String"/>). 
            </summary>
            <param name="src">Source <see cref="T:System.Byte"/> values buffer.</param>
            <param name="srcOffset">Source buffer offset.</param>
            <param name="maxLength">Max source buffer position, that method can reach.</param>
        </member>
        <member name="M:L2.Net.L2Buffer.Copy``1(``0[],System.Int64,``0[],System.Int64,System.Int64)">
            <summary>
            Copies array of generic values from one array to an other.
            </summary>
            <typeparam name="U">Some generic type.</typeparam>
            <param name="source">Source array.</param>
            <param name="srcOffset">Source array offset.</param>
            <param name="destination">Destination array.</param>
            <param name="dstOffset">Destination array offset.</param>
            <param name="length">Values to copy count.</param>
            <returns>Copied array of generic values.</returns>
        </member>
        <member name="T:L2.Net.L2FileReader">
            <summary>
            Files reader helper.
            </summary>
        </member>
        <member name="M:L2.Net.L2FileReader.CreateFile(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Creates or opens provided file.
            </summary>
            <param name="FileName">File name.</param>
            <param name="DesiredAccess">File access.</param>
            <param name="ShareMode">Share mode.</param>
            <param name="SecurityAttributes">Security attributes.</param>
            <param name="CreationDisposition">Creation disposition.</param>
            <param name="FlagsAndAttributes">Flags and attributes.</param>
            <param name="hTemplateFile">Template file.</param>
            <returns>True, if file was successfully opened, or created, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.L2FileReader.ReadFile(System.IntPtr,System.Void*,System.Int32,System.Int32*,System.Int32)">
            <summary>
            Reads provided file.
            </summary>
            <param name="hFile">File pointer.</param>
            <param name="pBuffer">Buffer to read into.</param>
            <param name="NumberOfBytesToRead">Count of bytes to read.</param>
            <param name="pNumberOfBytesRead">Count of bytes to read.</param>
            <param name="Overlapped">Overlapped value.</param>
            <returns>True, if file was succesfully readed, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.L2FileReader.CloseHandle(System.IntPtr)">
            <summary>
            Closes provided file pointer.
            </summary>
            <param name="hObject">File pointer to close.</param>
            <returns>True, if file was closed successfully, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.L2FileReader.Open(System.String)">
            <summary>
            Opens provided file to read.
            </summary>
            <param name="fileName">Path to file to open.</param>
            <returns>True, if file was opened successfully, otherwise false.</returns>
        </member>
        <member name="M:L2.Net.L2FileReader.Read(System.String,System.Int32)">
            <summary>
            Reads <see cref="T:System.Byte"/> array from provided file.
            </summary>
            <param name="fileName">File name to read from.</param>
            <param name="lengthToRead">Count of bytes to read.</param>
            <returns>Array of <see cref="T:System.Byte"/> values. </returns>
            <exception cref="T:System.IO.FileLoadException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:L2.Net.L2FileReader.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets information ( array of <see cref="T:System.IO.FileInfo"/> objects ), found by files <paramref name="mask"/> according to provided <see cref="T:System.IO.SearchOption"/>.
            </summary>
            <param name="directory">Directory to search files in.</param>
            <param name="mask">Search pattern.</param>
            <param name="searchHow">Search option.</param>
            <returns>Array of <see cref="T:System.IO.FileInfo"/> objects, containing information about files, that has been found.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException" />
        </member>
        <member name="T:L2.Net.L2Random">
            <summary>
            Provides common randomization methods.
            </summary>
        </member>
        <member name="F:L2.Net.L2Random.m_Random">
            <summary>
            Internal <see cref="T:System.Random"/> object.
            </summary>
        </member>
        <member name="M:L2.Net.L2Random.Next">
            <summary>
            Returns random <see cref="T:System.Int32"/> value.
            </summary>
            <returns>Random <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:L2.Net.L2Random.Next(System.Int32)">
            <summary>
            Returns random <see cref="T:System.Int32"/> value.
            </summary>
            <param name="max">Max result value.</param>
            <returns>Random <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:L2.Net.L2Random.NextBytes(System.Int32)">
            <summary>
            Returns randomly generated array of <see cref="T:System.Byte"/> values.
            </summary>
            <param name="count">Array length.</param>
            <returns>Randomly generated array of <see cref="T:System.Byte"/> values.</returns>
        </member>
        <member name="M:L2.Net.L2Random.NextBytes(System.Byte[]@)">
            <summary>
            Returns randomly generated array of <see cref="T:System.Byte"/> values.
            </summary>
            <param name="buffer">Array of <see cref="T:System.Byte"/> values to randomize.</param>
            <returns>Randomly generated array of <see cref="T:System.Byte"/> values.</returns>
        </member>
        <member name="T:L2.Net.Source">
            <summary>
            Logger source.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Unspecified">
            <summary>
            Source unspecified.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Logger">
            <summary>
            Source is logger.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Service">
            <summary>
            Source is current service.
            </summary>
        </member>
        <member name="F:L2.Net.Source.InnerNetwork">
            <summary>
            Source is related to inner network.
            </summary>
        </member>
        <member name="F:L2.Net.Source.OuterNetwork">
            <summary>
            Source is related to outer network.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Firewall">
            <summary>
            Source is <see cref="!:L2.Net.Network.Services.Firewall"/> object.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Listener">
            <summary>
            <see cref="!:L2.Net.Network.Services.Listener"/> class.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Debug">
            <summary>
            Debug message.
            </summary>
        </member>
        <member name="F:L2.Net.Source.DataProvider">
            <summary>
            Data provider message.
            </summary>
        </member>
        <member name="F:L2.Net.Source.DataProviderShadow">
            <summary>
            Data provider in shadow mode.
            </summary>
        </member>
        <member name="F:L2.Net.Source.Geodata">
            <summary>
            Geodata engine message.
            </summary>
        </member>
        <member name="F:L2.Net.Source.GeodataShadow">
            <summary>
            Geodata engine message in shadow mode.
            </summary>
        </member>
        <member name="F:L2.Net.Source.World">
            <summary>
            World message.
            </summary>
        </member>
        <member name="F:L2.Net.Source.WorldShadow">
            <summary>
            World message in shadow mode.
            </summary>
        </member>
        <member name="F:L2.Net.Source.ScriptsCompiler">
            <summary>
            Scripts compiler message.
            </summary>
        </member>
        <member name="T:L2.Net.Logger">
            <summary>
            Represents simple logger class.
            </summary>
        </member>
        <member name="F:L2.Net.Logger.CommonLogsDirectory">
            <summary>
            Common logs directory.
            </summary>
        </member>
        <member name="F:L2.Net.Logger.OutLogsDirectory">
            <summary>
            Output logs directory.
            </summary>
        </member>
        <member name="F:L2.Net.Logger.ExceptionsLogDirectory">
            <summary>
            Exceptions logs directory.
            </summary>
        </member>
        <member name="F:L2.Net.Logger.Output">
            <summary>
            Common output stream writer.
            </summary>
        </member>
        <member name="M:L2.Net.Logger.Write(System.Boolean,System.String,System.Object[])">
            <summary>
            Writes data to console and common output file.
            </summary>
            <param name="append">True, if current message must continue previous.</param>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:L2.Net.Logger.EndWrite(System.String,System.Object[])">
            <summary>
            Appends <see cref="P:System.Environment.NewLine"/> value to data, writes it to console and common output file.
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:L2.Net.Logger.WriteLine(L2.Net.Source,System.String,System.Object[])">
            <summary>
            Writes line to console and common output file.
            </summary>
            <param name="src">Logs <see cref="T:L2.Net.Source"/>.</param>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:L2.Net.Logger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes line to console and common output file.
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:L2.Net.Logger.Exception(System.Exception,System.String,System.Object[])">
            <summary>
            Stores <see cref="T:System.Exception"/> data and shows message to console.
            </summary>
            <param name="e">Occurred <see cref="T:System.Exception"/>.</param>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:L2.Net.Logger.Exception(System.Exception)">
            <summary>
            Stores <see cref="T:System.Exception"/> data and shows message on console.
            </summary>
            <param name="e">Occurred <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:L2.Net.Logger.FormatException(System.Exception)">
            <summary>
            Formats <see cref="T:System.Exception"/> object.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to format data about.</param>
            <returns>Formatted <see cref="T:System.Exception"/> data.</returns>
        </member>
        <member name="M:L2.Net.Logger.GetSystemSummary">
            <summary>
            Gets system information.
            </summary>
            <returns>Formatted system summary.</returns>
        </member>
        <member name="M:L2.Net.Logger.Initialize">
            <summary>
            Initializes logger.
            </summary>
        </member>
        <member name="M:L2.Net.Logger.WriteOutputLine(System.String)">
            <summary>
            Writes message to common output file.
            </summary>
            <param name="s">Message to write.</param>
        </member>
        <member name="M:L2.Net.Logger.WriteOutput(System.String)">
            <summary>
            Writes message to common output file.
            </summary>
            <param name="s">Message to write.</param>
        </member>
        <member name="M:L2.Net.Logger.EnsureDirectiries">
            <summary>
            Verifies that used directories exist.
            </summary>
        </member>
        <member name="M:L2.Net.Logger.WriteException(System.String,System.String)">
            <summary>
            Writes <see cref="T:System.Exception"/> data to it's file.
            </summary>
            <param name="type">String representation of <see cref="T:System.Exception"/> <see cref="T:System.Type"/>.</param>
            <param name="data"><see cref="T:System.Exception"/> data.</param>
        </member>
        <member name="M:L2.Net.Logger.FormatOutputString(System.String)">
            <summary>
            Appends date and time to provided <see cref="T:System.String"/>.
            </summary>
            <param name="s"><see cref="T:System.String"/> to format.</param>
            <returns>Formatted <see cref="T:System.String"/> object.</returns>
        </member>
        <member name="T:L2.Net.ServiceTime">
            <summary>
            Provides access to some service time related properties.
            </summary>
        </member>
        <member name="P:L2.Net.ServiceTime.CurrentTime">
            <summary>
            Gets current time as string.
            </summary>
        </member>
        <member name="P:L2.Net.ServiceTime.ServiceUptime">
            <summary>
            Gets service uptime as <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:L2.Net.ServiceTime.ServiceUptimeAsString">
            <summary>
            Gets service uptime as string.
            </summary>
        </member>
        <member name="T:L2.Net.Stopwatch">
            <summary>
            Represents extended hight performance counter class.
            </summary>
        </member>
        <member name="M:L2.Net.Stopwatch.QueryPerformanceCounter(System.Int64@)">
            <summary>
            Native QueryPerformanceCounter function import.
            </summary>
            <param name="x">Output <paramref name="x"/> value.</param>
        </member>
        <member name="M:L2.Net.Stopwatch.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            Native QueryPerformanceFrequency function import.
            </summary>
            <param name="x">Output <paramref name="x"/> value.</param>
        </member>
        <member name="F:L2.Net.Stopwatch.StartTime">
            <summary>
            <see cref="T:L2.Net.Stopwatch"/> start time value.
            </summary>
        </member>
        <member name="F:L2.Net.Stopwatch.StopTime">
            <summary>
            <see cref="T:L2.Net.Stopwatch"/> stop time value.
            </summary>
        </member>
        <member name="F:L2.Net.Stopwatch.ClockFrequency">
            <summary>
            <see cref="T:L2.Net.Stopwatch"/> clack frequency value.
            </summary>
        </member>
        <member name="F:L2.Net.Stopwatch.CalibrationTime">
            <summary>
            <see cref="T:L2.Net.Stopwatch"/> calibration time value.
            </summary>
        </member>
        <member name="M:L2.Net.Stopwatch.#ctor">
            <summary>
            Initializes new instance of <see cref="T:L2.Net.Stopwatch"/> object.
            </summary>
        </member>
        <member name="M:L2.Net.Stopwatch.Reset">
            <summary>
            Resets <see cref="T:L2.Net.Stopwatch"/> object: sets it start and stop time to zero values.
            </summary>
        </member>
        <member name="M:L2.Net.Stopwatch.Start">
            <summary>
            Start <see cref="T:L2.Net.Stopwatch"/> counter.
            </summary>
        </member>
        <member name="M:L2.Net.Stopwatch.Stop">
            <summary>
            Stops <see cref="T:L2.Net.Stopwatch"/> counter.
            </summary>
        </member>
        <member name="M:L2.Net.Stopwatch.GetElapsedTimeSpan">
            <summary>
            Gets <see cref="T:System.TimeSpan"/> value, elapsed between <see cref="T:L2.Net.Stopwatch"/> start and stop events.
            </summary>
            <returns><see cref="T:System.TimeSpan"/> value between <see cref="T:L2.Net.Stopwatch"/> has been started and stopped.</returns>
        </member>
        <member name="M:L2.Net.Stopwatch.GetElapsedTimeInMicroseconds">
            <summary>
            Gets time, elapsed between <see cref="T:L2.Net.Stopwatch"/> start and stop events in microseconds.
            </summary>
            <returns><see cref="T:System.Double"/> value in microseconds between <see cref="T:L2.Net.Stopwatch"/> has been started and stopped.</returns>
        </member>
        <member name="M:L2.Net.Stopwatch.Calibrate">
            <summary>
            Calibrates <see cref="T:L2.Net.Stopwatch"/> object.
            </summary>
        </member>
    </members>
</doc>
